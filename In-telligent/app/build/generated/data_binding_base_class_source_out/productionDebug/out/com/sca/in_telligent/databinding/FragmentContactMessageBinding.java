// Generated by view binder compiler. Do not edit!
package com.sca.in_telligent.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.constraintlayout.widget.Guideline;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.sca.in_telligent.R;
import com.sca.in_telligent.util.MySpinner;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentContactMessageBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MySpinner contactAlertSpinner;

  @NonNull
  public final RelativeLayout contactAlertSpinnerLayout;

  @NonNull
  public final ImageView contactMessageBackButton;

  @NonNull
  public final TextView contactMessageBackText;

  @NonNull
  public final ConstraintLayout contactSendAttachmentLayout;

  @NonNull
  public final ProgressBar contactSendAttachmentProgressBar;

  @NonNull
  public final TextView contactSendAttachmentText;

  @NonNull
  public final ImageView contactSendMessageAttachmentIcon;

  @NonNull
  public final TextView contactSendMessageButton;

  @NonNull
  public final EditText contactSendMessageEdittext;

  @NonNull
  public final RelativeLayout contactSendSpinnerLayout;

  @NonNull
  public final EditText contactSendTitleEdittext;

  @NonNull
  public final MySpinner contactSendToSpinner;

  @NonNull
  public final TextView contactTitleText;

  @NonNull
  public final Guideline guidelineLeft;

  @NonNull
  public final Guideline guidelineRight;

  @NonNull
  public final FieldRequiredLayoutBinding requiredAlertType;

  @NonNull
  public final FieldRequiredLayoutBinding requiredEnterMessage;

  @NonNull
  public final FieldRequiredLayoutBinding requiredEnterTitle;

  @NonNull
  public final FieldRequiredLayoutBinding requiredSendTo;

  private FragmentContactMessageBinding(@NonNull ConstraintLayout rootView,
      @NonNull MySpinner contactAlertSpinner, @NonNull RelativeLayout contactAlertSpinnerLayout,
      @NonNull ImageView contactMessageBackButton, @NonNull TextView contactMessageBackText,
      @NonNull ConstraintLayout contactSendAttachmentLayout,
      @NonNull ProgressBar contactSendAttachmentProgressBar,
      @NonNull TextView contactSendAttachmentText,
      @NonNull ImageView contactSendMessageAttachmentIcon,
      @NonNull TextView contactSendMessageButton, @NonNull EditText contactSendMessageEdittext,
      @NonNull RelativeLayout contactSendSpinnerLayout, @NonNull EditText contactSendTitleEdittext,
      @NonNull MySpinner contactSendToSpinner, @NonNull TextView contactTitleText,
      @NonNull Guideline guidelineLeft, @NonNull Guideline guidelineRight,
      @NonNull FieldRequiredLayoutBinding requiredAlertType,
      @NonNull FieldRequiredLayoutBinding requiredEnterMessage,
      @NonNull FieldRequiredLayoutBinding requiredEnterTitle,
      @NonNull FieldRequiredLayoutBinding requiredSendTo) {
    this.rootView = rootView;
    this.contactAlertSpinner = contactAlertSpinner;
    this.contactAlertSpinnerLayout = contactAlertSpinnerLayout;
    this.contactMessageBackButton = contactMessageBackButton;
    this.contactMessageBackText = contactMessageBackText;
    this.contactSendAttachmentLayout = contactSendAttachmentLayout;
    this.contactSendAttachmentProgressBar = contactSendAttachmentProgressBar;
    this.contactSendAttachmentText = contactSendAttachmentText;
    this.contactSendMessageAttachmentIcon = contactSendMessageAttachmentIcon;
    this.contactSendMessageButton = contactSendMessageButton;
    this.contactSendMessageEdittext = contactSendMessageEdittext;
    this.contactSendSpinnerLayout = contactSendSpinnerLayout;
    this.contactSendTitleEdittext = contactSendTitleEdittext;
    this.contactSendToSpinner = contactSendToSpinner;
    this.contactTitleText = contactTitleText;
    this.guidelineLeft = guidelineLeft;
    this.guidelineRight = guidelineRight;
    this.requiredAlertType = requiredAlertType;
    this.requiredEnterMessage = requiredEnterMessage;
    this.requiredEnterTitle = requiredEnterTitle;
    this.requiredSendTo = requiredSendTo;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentContactMessageBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentContactMessageBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_contact_message, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentContactMessageBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.contact_alert_spinner;
      MySpinner contactAlertSpinner = ViewBindings.findChildViewById(rootView, id);
      if (contactAlertSpinner == null) {
        break missingId;
      }

      id = R.id.contact_alert_spinner_layout;
      RelativeLayout contactAlertSpinnerLayout = ViewBindings.findChildViewById(rootView, id);
      if (contactAlertSpinnerLayout == null) {
        break missingId;
      }

      id = R.id.contact_message_back_button;
      ImageView contactMessageBackButton = ViewBindings.findChildViewById(rootView, id);
      if (contactMessageBackButton == null) {
        break missingId;
      }

      id = R.id.contact_message_back_text;
      TextView contactMessageBackText = ViewBindings.findChildViewById(rootView, id);
      if (contactMessageBackText == null) {
        break missingId;
      }

      id = R.id.contact_send_attachment_layout;
      ConstraintLayout contactSendAttachmentLayout = ViewBindings.findChildViewById(rootView, id);
      if (contactSendAttachmentLayout == null) {
        break missingId;
      }

      id = R.id.contact_send_attachment_progress_bar;
      ProgressBar contactSendAttachmentProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (contactSendAttachmentProgressBar == null) {
        break missingId;
      }

      id = R.id.contact_send_attachment_text;
      TextView contactSendAttachmentText = ViewBindings.findChildViewById(rootView, id);
      if (contactSendAttachmentText == null) {
        break missingId;
      }

      id = R.id.contact_send_message_attachment_icon;
      ImageView contactSendMessageAttachmentIcon = ViewBindings.findChildViewById(rootView, id);
      if (contactSendMessageAttachmentIcon == null) {
        break missingId;
      }

      id = R.id.contact_send_message_button;
      TextView contactSendMessageButton = ViewBindings.findChildViewById(rootView, id);
      if (contactSendMessageButton == null) {
        break missingId;
      }

      id = R.id.contact_send_message_edittext;
      EditText contactSendMessageEdittext = ViewBindings.findChildViewById(rootView, id);
      if (contactSendMessageEdittext == null) {
        break missingId;
      }

      id = R.id.contact_send_spinner_layout;
      RelativeLayout contactSendSpinnerLayout = ViewBindings.findChildViewById(rootView, id);
      if (contactSendSpinnerLayout == null) {
        break missingId;
      }

      id = R.id.contact_send_title_edittext;
      EditText contactSendTitleEdittext = ViewBindings.findChildViewById(rootView, id);
      if (contactSendTitleEdittext == null) {
        break missingId;
      }

      id = R.id.contact_send_to_spinner;
      MySpinner contactSendToSpinner = ViewBindings.findChildViewById(rootView, id);
      if (contactSendToSpinner == null) {
        break missingId;
      }

      id = R.id.contact_title_text;
      TextView contactTitleText = ViewBindings.findChildViewById(rootView, id);
      if (contactTitleText == null) {
        break missingId;
      }

      id = R.id.guideline_left;
      Guideline guidelineLeft = ViewBindings.findChildViewById(rootView, id);
      if (guidelineLeft == null) {
        break missingId;
      }

      id = R.id.guideline_right;
      Guideline guidelineRight = ViewBindings.findChildViewById(rootView, id);
      if (guidelineRight == null) {
        break missingId;
      }

      id = R.id.required_alert_type;
      View requiredAlertType = ViewBindings.findChildViewById(rootView, id);
      if (requiredAlertType == null) {
        break missingId;
      }
      FieldRequiredLayoutBinding binding_requiredAlertType = FieldRequiredLayoutBinding.bind(requiredAlertType);

      id = R.id.required_enter_message;
      View requiredEnterMessage = ViewBindings.findChildViewById(rootView, id);
      if (requiredEnterMessage == null) {
        break missingId;
      }
      FieldRequiredLayoutBinding binding_requiredEnterMessage = FieldRequiredLayoutBinding.bind(requiredEnterMessage);

      id = R.id.required_enter_title;
      View requiredEnterTitle = ViewBindings.findChildViewById(rootView, id);
      if (requiredEnterTitle == null) {
        break missingId;
      }
      FieldRequiredLayoutBinding binding_requiredEnterTitle = FieldRequiredLayoutBinding.bind(requiredEnterTitle);

      id = R.id.required_send_to;
      View requiredSendTo = ViewBindings.findChildViewById(rootView, id);
      if (requiredSendTo == null) {
        break missingId;
      }
      FieldRequiredLayoutBinding binding_requiredSendTo = FieldRequiredLayoutBinding.bind(requiredSendTo);

      return new FragmentContactMessageBinding((ConstraintLayout) rootView, contactAlertSpinner,
          contactAlertSpinnerLayout, contactMessageBackButton, contactMessageBackText,
          contactSendAttachmentLayout, contactSendAttachmentProgressBar, contactSendAttachmentText,
          contactSendMessageAttachmentIcon, contactSendMessageButton, contactSendMessageEdittext,
          contactSendSpinnerLayout, contactSendTitleEdittext, contactSendToSpinner,
          contactTitleText, guidelineLeft, guidelineRight, binding_requiredAlertType,
          binding_requiredEnterMessage, binding_requiredEnterTitle, binding_requiredSendTo);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
