// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.di.module;

import com.sca.in_telligent.ui.contact.call.ContactCallMvpPresenter;
import com.sca.in_telligent.ui.contact.call.ContactCallMvpView;
import com.sca.in_telligent.ui.contact.call.ContactCallPresenter;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ActivityModule_ProvideContactCallPresenterFactory implements Factory<ContactCallMvpPresenter<ContactCallMvpView>> {
  private final ActivityModule module;

  private final Provider<ContactCallPresenter<ContactCallMvpView>> presenterProvider;

  public ActivityModule_ProvideContactCallPresenterFactory(ActivityModule module,
      Provider<ContactCallPresenter<ContactCallMvpView>> presenterProvider) {
    this.module = module;
    this.presenterProvider = presenterProvider;
  }

  @Override
  public ContactCallMvpPresenter<ContactCallMvpView> get() {
    return provideContactCallPresenter(module, presenterProvider.get());
  }

  public static ActivityModule_ProvideContactCallPresenterFactory create(ActivityModule module,
      Provider<ContactCallPresenter<ContactCallMvpView>> presenterProvider) {
    return new ActivityModule_ProvideContactCallPresenterFactory(module, presenterProvider);
  }

  public static ContactCallMvpPresenter<ContactCallMvpView> provideContactCallPresenter(
      ActivityModule instance, ContactCallPresenter<ContactCallMvpView> presenter) {
    return Preconditions.checkNotNullFromProvides(instance.provideContactCallPresenter(presenter));
  }
}
