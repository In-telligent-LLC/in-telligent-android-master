// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.service;

import com.sca.in_telligent.data.DataManager;
import com.sca.in_telligent.util.LocationUtil;
import com.sca.in_telligent.util.WeatherUtil;
import com.sca.in_telligent.util.geofence.GeofenceClient;
import com.sca.in_telligent.util.rx.SchedulerProvider;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import io.reactivex.rxjava3.disposables.CompositeDisposable;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class GeofenceTransitionsIntentService_MembersInjector implements MembersInjector<GeofenceTransitionsIntentService> {
  private final Provider<LocationUtil> mLocationUtilProvider;

  private final Provider<DataManager> mDataManagerProvider;

  private final Provider<SchedulerProvider> mSchedulerProvider;

  private final Provider<CompositeDisposable> mCompositeDisposableProvider;

  private final Provider<GeofenceClient> mGeofenceClientProvider;

  private final Provider<WeatherUtil> mWeatherUtilProvider;

  public GeofenceTransitionsIntentService_MembersInjector(
      Provider<LocationUtil> mLocationUtilProvider, Provider<DataManager> mDataManagerProvider,
      Provider<SchedulerProvider> mSchedulerProvider,
      Provider<CompositeDisposable> mCompositeDisposableProvider,
      Provider<GeofenceClient> mGeofenceClientProvider,
      Provider<WeatherUtil> mWeatherUtilProvider) {
    this.mLocationUtilProvider = mLocationUtilProvider;
    this.mDataManagerProvider = mDataManagerProvider;
    this.mSchedulerProvider = mSchedulerProvider;
    this.mCompositeDisposableProvider = mCompositeDisposableProvider;
    this.mGeofenceClientProvider = mGeofenceClientProvider;
    this.mWeatherUtilProvider = mWeatherUtilProvider;
  }

  public static MembersInjector<GeofenceTransitionsIntentService> create(
      Provider<LocationUtil> mLocationUtilProvider, Provider<DataManager> mDataManagerProvider,
      Provider<SchedulerProvider> mSchedulerProvider,
      Provider<CompositeDisposable> mCompositeDisposableProvider,
      Provider<GeofenceClient> mGeofenceClientProvider,
      Provider<WeatherUtil> mWeatherUtilProvider) {
    return new GeofenceTransitionsIntentService_MembersInjector(mLocationUtilProvider, mDataManagerProvider, mSchedulerProvider, mCompositeDisposableProvider, mGeofenceClientProvider, mWeatherUtilProvider);
  }

  @Override
  public void injectMembers(GeofenceTransitionsIntentService instance) {
    injectMLocationUtil(instance, mLocationUtilProvider.get());
    injectMDataManager(instance, mDataManagerProvider.get());
    injectMSchedulerProvider(instance, mSchedulerProvider.get());
    injectMCompositeDisposable(instance, mCompositeDisposableProvider.get());
    injectMGeofenceClient(instance, mGeofenceClientProvider.get());
    injectMWeatherUtil(instance, mWeatherUtilProvider.get());
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.GeofenceTransitionsIntentService.mLocationUtil")
  public static void injectMLocationUtil(GeofenceTransitionsIntentService instance,
      LocationUtil mLocationUtil) {
    instance.mLocationUtil = mLocationUtil;
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.GeofenceTransitionsIntentService.mDataManager")
  public static void injectMDataManager(GeofenceTransitionsIntentService instance,
      DataManager mDataManager) {
    instance.mDataManager = mDataManager;
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.GeofenceTransitionsIntentService.mSchedulerProvider")
  public static void injectMSchedulerProvider(GeofenceTransitionsIntentService instance,
      SchedulerProvider mSchedulerProvider) {
    instance.mSchedulerProvider = mSchedulerProvider;
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.GeofenceTransitionsIntentService.mCompositeDisposable")
  public static void injectMCompositeDisposable(GeofenceTransitionsIntentService instance,
      CompositeDisposable mCompositeDisposable) {
    instance.mCompositeDisposable = mCompositeDisposable;
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.GeofenceTransitionsIntentService.mGeofenceClient")
  public static void injectMGeofenceClient(GeofenceTransitionsIntentService instance,
      GeofenceClient mGeofenceClient) {
    instance.mGeofenceClient = mGeofenceClient;
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.GeofenceTransitionsIntentService.mWeatherUtil")
  public static void injectMWeatherUtil(GeofenceTransitionsIntentService instance,
      WeatherUtil mWeatherUtil) {
    instance.mWeatherUtil = mWeatherUtil;
  }
}
