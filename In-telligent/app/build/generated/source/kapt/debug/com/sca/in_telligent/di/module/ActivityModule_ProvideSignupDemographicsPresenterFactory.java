// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.di.module;

import com.sca.in_telligent.ui.auth.register.SignupDemographicsMvpPresenter;
import com.sca.in_telligent.ui.auth.register.SignupDemographicsMvpView;
import com.sca.in_telligent.ui.auth.register.SignupDemographicsPresenter;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("com.sca.in_telligent.di.PerActivity")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ActivityModule_ProvideSignupDemographicsPresenterFactory implements Factory<SignupDemographicsMvpPresenter<SignupDemographicsMvpView>> {
  private final ActivityModule module;

  private final Provider<SignupDemographicsPresenter<SignupDemographicsMvpView>> presenterProvider;

  public ActivityModule_ProvideSignupDemographicsPresenterFactory(ActivityModule module,
      Provider<SignupDemographicsPresenter<SignupDemographicsMvpView>> presenterProvider) {
    this.module = module;
    this.presenterProvider = presenterProvider;
  }

  @Override
  public SignupDemographicsMvpPresenter<SignupDemographicsMvpView> get() {
    return provideSignupDemographicsPresenter(module, presenterProvider.get());
  }

  public static ActivityModule_ProvideSignupDemographicsPresenterFactory create(
      ActivityModule module,
      Provider<SignupDemographicsPresenter<SignupDemographicsMvpView>> presenterProvider) {
    return new ActivityModule_ProvideSignupDemographicsPresenterFactory(module, presenterProvider);
  }

  public static SignupDemographicsMvpPresenter<SignupDemographicsMvpView> provideSignupDemographicsPresenter(
      ActivityModule instance, SignupDemographicsPresenter<SignupDemographicsMvpView> presenter) {
    return Preconditions.checkNotNullFromProvides(instance.provideSignupDemographicsPresenter(presenter));
  }
}
