// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.util;

import com.sca.in_telligent.data.DataManager;
import com.sca.in_telligent.util.rx.SchedulerProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import io.reactivex.rxjava3.disposables.CompositeDisposable;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppLifecycleObserver_Factory implements Factory<AppLifecycleObserver> {
  private final Provider<DataManager> dataManagerProvider;

  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  public AppLifecycleObserver_Factory(Provider<DataManager> dataManagerProvider,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    this.dataManagerProvider = dataManagerProvider;
    this.schedulerProvider = schedulerProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
  }

  @Override
  public AppLifecycleObserver get() {
    return newInstance(dataManagerProvider.get(), schedulerProvider.get(), compositeDisposableProvider.get());
  }

  public static AppLifecycleObserver_Factory create(Provider<DataManager> dataManagerProvider,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    return new AppLifecycleObserver_Factory(dataManagerProvider, schedulerProvider, compositeDisposableProvider);
  }

  public static AppLifecycleObserver newInstance(DataManager dataManager,
      SchedulerProvider schedulerProvider, CompositeDisposable compositeDisposable) {
    return new AppLifecycleObserver(dataManager, schedulerProvider, compositeDisposable);
  }
}
