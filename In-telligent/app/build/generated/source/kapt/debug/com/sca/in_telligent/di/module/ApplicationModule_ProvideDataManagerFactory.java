// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.di.module;

import com.sca.in_telligent.data.AppDataManager;
import com.sca.in_telligent.data.DataManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ApplicationModule_ProvideDataManagerFactory implements Factory<DataManager> {
  private final ApplicationModule module;

  private final Provider<AppDataManager> appDataManagerProvider;

  public ApplicationModule_ProvideDataManagerFactory(ApplicationModule module,
      Provider<AppDataManager> appDataManagerProvider) {
    this.module = module;
    this.appDataManagerProvider = appDataManagerProvider;
  }

  @Override
  public DataManager get() {
    return provideDataManager(module, appDataManagerProvider.get());
  }

  public static ApplicationModule_ProvideDataManagerFactory create(ApplicationModule module,
      Provider<AppDataManager> appDataManagerProvider) {
    return new ApplicationModule_ProvideDataManagerFactory(module, appDataManagerProvider);
  }

  public static DataManager provideDataManager(ApplicationModule instance,
      AppDataManager appDataManager) {
    return Preconditions.checkNotNullFromProvides(instance.provideDataManager(appDataManager));
  }
}
