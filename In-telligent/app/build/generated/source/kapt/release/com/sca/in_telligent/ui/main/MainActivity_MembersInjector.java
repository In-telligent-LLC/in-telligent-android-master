// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.ui.main;

import android.media.AudioManager;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.work.WorkManager;
import com.google.android.gms.location.FusedLocationProviderClient;
import com.sca.in_telligent.data.DataManager;
import com.sca.in_telligent.openapi.util.AudioHelper;
import com.sca.in_telligent.ui.base.BaseActivity_MembersInjector;
import com.sca.in_telligent.util.LocationUtil;
import com.sca.in_telligent.util.Responder;
import com.sca.in_telligent.util.VideoDownloader;
import com.sca.in_telligent.util.geofence.GeofenceClient;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<AudioHelper> audioHelperProvider;

  private final Provider<AudioManager> audioManagerProvider;

  private final Provider<DataManager> dataManagerProvider;

  private final Provider<FusedLocationProviderClient> fusedLocationProviderClientProvider;

  private final Provider<LocationUtil> locationUtilProvider;

  private final Provider<Responder> responderProvider;

  private final Provider<VideoDownloader> videoDownloaderProvider;

  private final Provider<NavigationDrawerAdapter> adapterProvider;

  private final Provider<WorkManager> workManagerProvider;

  private final Provider<GeofenceClient> mGeofenceClientProvider;

  private final Provider<LinearLayoutManager> mLayoutManagerProvider;

  private final Provider<MainMvpPresenter<MainMvpView>> mPresenterProvider;

  public MainActivity_MembersInjector(Provider<AudioHelper> audioHelperProvider,
      Provider<AudioManager> audioManagerProvider, Provider<DataManager> dataManagerProvider,
      Provider<FusedLocationProviderClient> fusedLocationProviderClientProvider,
      Provider<LocationUtil> locationUtilProvider, Provider<Responder> responderProvider,
      Provider<VideoDownloader> videoDownloaderProvider,
      Provider<NavigationDrawerAdapter> adapterProvider, Provider<WorkManager> workManagerProvider,
      Provider<GeofenceClient> mGeofenceClientProvider,
      Provider<LinearLayoutManager> mLayoutManagerProvider,
      Provider<MainMvpPresenter<MainMvpView>> mPresenterProvider) {
    this.audioHelperProvider = audioHelperProvider;
    this.audioManagerProvider = audioManagerProvider;
    this.dataManagerProvider = dataManagerProvider;
    this.fusedLocationProviderClientProvider = fusedLocationProviderClientProvider;
    this.locationUtilProvider = locationUtilProvider;
    this.responderProvider = responderProvider;
    this.videoDownloaderProvider = videoDownloaderProvider;
    this.adapterProvider = adapterProvider;
    this.workManagerProvider = workManagerProvider;
    this.mGeofenceClientProvider = mGeofenceClientProvider;
    this.mLayoutManagerProvider = mLayoutManagerProvider;
    this.mPresenterProvider = mPresenterProvider;
  }

  public static MembersInjector<MainActivity> create(Provider<AudioHelper> audioHelperProvider,
      Provider<AudioManager> audioManagerProvider, Provider<DataManager> dataManagerProvider,
      Provider<FusedLocationProviderClient> fusedLocationProviderClientProvider,
      Provider<LocationUtil> locationUtilProvider, Provider<Responder> responderProvider,
      Provider<VideoDownloader> videoDownloaderProvider,
      Provider<NavigationDrawerAdapter> adapterProvider, Provider<WorkManager> workManagerProvider,
      Provider<GeofenceClient> mGeofenceClientProvider,
      Provider<LinearLayoutManager> mLayoutManagerProvider,
      Provider<MainMvpPresenter<MainMvpView>> mPresenterProvider) {
    return new MainActivity_MembersInjector(audioHelperProvider, audioManagerProvider, dataManagerProvider, fusedLocationProviderClientProvider, locationUtilProvider, responderProvider, videoDownloaderProvider, adapterProvider, workManagerProvider, mGeofenceClientProvider, mLayoutManagerProvider, mPresenterProvider);
  }

  @Override
  public void injectMembers(MainActivity instance) {
    BaseActivity_MembersInjector.injectAudioHelper(instance, audioHelperProvider.get());
    BaseActivity_MembersInjector.injectAudioManager(instance, audioManagerProvider.get());
    BaseActivity_MembersInjector.injectDataManager(instance, dataManagerProvider.get());
    BaseActivity_MembersInjector.injectFusedLocationProviderClient(instance, fusedLocationProviderClientProvider.get());
    BaseActivity_MembersInjector.injectLocationUtil(instance, locationUtilProvider.get());
    BaseActivity_MembersInjector.injectResponder(instance, responderProvider.get());
    BaseActivity_MembersInjector.injectVideoDownloader(instance, videoDownloaderProvider.get());
    injectAdapter(instance, adapterProvider.get());
    injectWorkManager(instance, workManagerProvider.get());
    injectMGeofenceClient(instance, mGeofenceClientProvider.get());
    injectMLayoutManager(instance, mLayoutManagerProvider.get());
    injectMPresenter(instance, mPresenterProvider.get());
  }

  @InjectedFieldSignature("com.sca.in_telligent.ui.main.MainActivity.adapter")
  public static void injectAdapter(MainActivity instance, NavigationDrawerAdapter adapter) {
    instance.adapter = adapter;
  }

  @InjectedFieldSignature("com.sca.in_telligent.ui.main.MainActivity.workManager")
  public static void injectWorkManager(MainActivity instance, WorkManager workManager) {
    instance.workManager = workManager;
  }

  @InjectedFieldSignature("com.sca.in_telligent.ui.main.MainActivity.mGeofenceClient")
  public static void injectMGeofenceClient(MainActivity instance, GeofenceClient mGeofenceClient) {
    instance.mGeofenceClient = mGeofenceClient;
  }

  @InjectedFieldSignature("com.sca.in_telligent.ui.main.MainActivity.mLayoutManager")
  public static void injectMLayoutManager(MainActivity instance,
      LinearLayoutManager mLayoutManager) {
    instance.mLayoutManager = mLayoutManager;
  }

  @InjectedFieldSignature("com.sca.in_telligent.ui.main.MainActivity.mPresenter")
  public static void injectMPresenter(MainActivity instance,
      MainMvpPresenter<MainMvpView> mPresenter) {
    instance.mPresenter = mPresenter;
  }
}
