// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.util.geofence;

import android.content.Context;
import com.google.android.gms.location.GeofencingClient;
import com.sca.in_telligent.data.DataManager;
import com.sca.in_telligent.util.LocationUtil;
import com.sca.in_telligent.util.rx.SchedulerProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import io.reactivex.rxjava3.disposables.CompositeDisposable;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("com.sca.in_telligent.di.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppGeofenceClient_Factory implements Factory<AppGeofenceClient> {
  private final Provider<GeofencingClient> geofencingClientProvider;

  private final Provider<LocationUtil> locationUtilProvider;

  private final Provider<DataManager> dataManagerProvider;

  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  private final Provider<Context> contextProvider;

  public AppGeofenceClient_Factory(Provider<GeofencingClient> geofencingClientProvider,
      Provider<LocationUtil> locationUtilProvider, Provider<DataManager> dataManagerProvider,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<Context> contextProvider) {
    this.geofencingClientProvider = geofencingClientProvider;
    this.locationUtilProvider = locationUtilProvider;
    this.dataManagerProvider = dataManagerProvider;
    this.schedulerProvider = schedulerProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
    this.contextProvider = contextProvider;
  }

  @Override
  public AppGeofenceClient get() {
    return newInstance(geofencingClientProvider.get(), locationUtilProvider.get(), dataManagerProvider.get(), schedulerProvider.get(), compositeDisposableProvider.get(), contextProvider.get());
  }

  public static AppGeofenceClient_Factory create(
      Provider<GeofencingClient> geofencingClientProvider,
      Provider<LocationUtil> locationUtilProvider, Provider<DataManager> dataManagerProvider,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<Context> contextProvider) {
    return new AppGeofenceClient_Factory(geofencingClientProvider, locationUtilProvider, dataManagerProvider, schedulerProvider, compositeDisposableProvider, contextProvider);
  }

  public static AppGeofenceClient newInstance(GeofencingClient geofencingClient,
      LocationUtil locationUtil, DataManager dataManager, SchedulerProvider schedulerProvider,
      CompositeDisposable compositeDisposable, Context context) {
    return new AppGeofenceClient(geofencingClient, locationUtil, dataManager, schedulerProvider, compositeDisposable, context);
  }
}
