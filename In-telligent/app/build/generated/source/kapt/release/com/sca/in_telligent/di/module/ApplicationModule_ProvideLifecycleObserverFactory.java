// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.di.module;

import com.sca.in_telligent.util.AppLifecycleObserver;
import com.sca.in_telligent.util.LifecycleInterface;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ApplicationModule_ProvideLifecycleObserverFactory implements Factory<LifecycleInterface> {
  private final ApplicationModule module;

  private final Provider<AppLifecycleObserver> appLifecycleObserverProvider;

  public ApplicationModule_ProvideLifecycleObserverFactory(ApplicationModule module,
      Provider<AppLifecycleObserver> appLifecycleObserverProvider) {
    this.module = module;
    this.appLifecycleObserverProvider = appLifecycleObserverProvider;
  }

  @Override
  public LifecycleInterface get() {
    return provideLifecycleObserver(module, appLifecycleObserverProvider.get());
  }

  public static ApplicationModule_ProvideLifecycleObserverFactory create(ApplicationModule module,
      Provider<AppLifecycleObserver> appLifecycleObserverProvider) {
    return new ApplicationModule_ProvideLifecycleObserverFactory(module, appLifecycleObserverProvider);
  }

  public static LifecycleInterface provideLifecycleObserver(ApplicationModule instance,
      AppLifecycleObserver appLifecycleObserver) {
    return Preconditions.checkNotNullFromProvides(instance.provideLifecycleObserver(appLifecycleObserver));
  }
}
