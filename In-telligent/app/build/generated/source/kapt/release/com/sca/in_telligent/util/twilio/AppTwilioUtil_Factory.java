// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.util.twilio;

import android.content.Context;
import com.sca.in_telligent.data.DataManager;
import com.sca.in_telligent.data.prefs.PreferencesHelper;
import com.sca.in_telligent.util.Responder;
import com.sca.in_telligent.util.rx.SchedulerProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import io.reactivex.rxjava3.disposables.CompositeDisposable;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("com.sca.in_telligent.di.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppTwilioUtil_Factory implements Factory<AppTwilioUtil> {
  private final Provider<Context> contextProvider;

  private final Provider<DataManager> dataManagerProvider;

  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  private final Provider<Responder> responderProvider;

  private final Provider<PreferencesHelper> preferencesHelperProvider;

  public AppTwilioUtil_Factory(Provider<Context> contextProvider,
      Provider<DataManager> dataManagerProvider, Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<Responder> responderProvider,
      Provider<PreferencesHelper> preferencesHelperProvider) {
    this.contextProvider = contextProvider;
    this.dataManagerProvider = dataManagerProvider;
    this.schedulerProvider = schedulerProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
    this.responderProvider = responderProvider;
    this.preferencesHelperProvider = preferencesHelperProvider;
  }

  @Override
  public AppTwilioUtil get() {
    return newInstance(contextProvider.get(), dataManagerProvider.get(), schedulerProvider.get(), compositeDisposableProvider.get(), responderProvider.get(), preferencesHelperProvider.get());
  }

  public static AppTwilioUtil_Factory create(Provider<Context> contextProvider,
      Provider<DataManager> dataManagerProvider, Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<Responder> responderProvider,
      Provider<PreferencesHelper> preferencesHelperProvider) {
    return new AppTwilioUtil_Factory(contextProvider, dataManagerProvider, schedulerProvider, compositeDisposableProvider, responderProvider, preferencesHelperProvider);
  }

  public static AppTwilioUtil newInstance(Context context, DataManager dataManager,
      SchedulerProvider schedulerProvider, CompositeDisposable compositeDisposable,
      Responder responder, PreferencesHelper preferencesHelper) {
    return new AppTwilioUtil(context, dataManager, schedulerProvider, compositeDisposable, responder, preferencesHelper);
  }
}
