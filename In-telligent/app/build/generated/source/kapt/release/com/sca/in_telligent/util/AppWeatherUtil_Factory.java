// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.util;

import android.content.Context;
import com.sca.in_telligent.data.DataManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("com.sca.in_telligent.di.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppWeatherUtil_Factory implements Factory<AppWeatherUtil> {
  private final Provider<Context> contextProvider;

  private final Provider<LocationUtil> locationUtilProvider;

  private final Provider<DataManager> dataManagerProvider;

  public AppWeatherUtil_Factory(Provider<Context> contextProvider,
      Provider<LocationUtil> locationUtilProvider, Provider<DataManager> dataManagerProvider) {
    this.contextProvider = contextProvider;
    this.locationUtilProvider = locationUtilProvider;
    this.dataManagerProvider = dataManagerProvider;
  }

  @Override
  public AppWeatherUtil get() {
    AppWeatherUtil instance = newInstance(contextProvider.get(), locationUtilProvider.get());
    AppWeatherUtil_MembersInjector.injectDataManager(instance, dataManagerProvider.get());
    return instance;
  }

  public static AppWeatherUtil_Factory create(Provider<Context> contextProvider,
      Provider<LocationUtil> locationUtilProvider, Provider<DataManager> dataManagerProvider) {
    return new AppWeatherUtil_Factory(contextProvider, locationUtilProvider, dataManagerProvider);
  }

  public static AppWeatherUtil newInstance(Context context, LocationUtil locationUtil) {
    return new AppWeatherUtil(context, locationUtil);
  }
}
