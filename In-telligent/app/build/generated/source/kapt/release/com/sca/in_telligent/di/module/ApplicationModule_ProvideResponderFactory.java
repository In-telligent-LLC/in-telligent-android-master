// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.di.module;

import com.sca.in_telligent.util.AppResponder;
import com.sca.in_telligent.util.Responder;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ApplicationModule_ProvideResponderFactory implements Factory<Responder> {
  private final ApplicationModule module;

  private final Provider<AppResponder> appResponderProvider;

  public ApplicationModule_ProvideResponderFactory(ApplicationModule module,
      Provider<AppResponder> appResponderProvider) {
    this.module = module;
    this.appResponderProvider = appResponderProvider;
  }

  @Override
  public Responder get() {
    return provideResponder(module, appResponderProvider.get());
  }

  public static ApplicationModule_ProvideResponderFactory create(ApplicationModule module,
      Provider<AppResponder> appResponderProvider) {
    return new ApplicationModule_ProvideResponderFactory(module, appResponderProvider);
  }

  public static Responder provideResponder(ApplicationModule instance, AppResponder appResponder) {
    return Preconditions.checkNotNullFromProvides(instance.provideResponder(appResponder));
  }
}
