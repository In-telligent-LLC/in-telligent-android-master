// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.di.component;

import androidx.recyclerview.widget.LinearLayoutManager;
import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.sca.in_telligent.data.DataManager;
import com.sca.in_telligent.di.module.ActivityModule;
import com.sca.in_telligent.di.module.ActivityModule_ProvideAccountSettingsPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideActivityFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideAlertDetailPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideAlertListAdapterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideAlertListPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideCompositeDisposableFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideContactCallPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideContactDeliverListAdapterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideContactDeliverPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideContactListGroupAdapterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideContactListPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideContactMessagePresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideContactSpinnerAdapterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideFindLocationPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideForgotPasswordPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideGenerateGroupPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideGroupDetailPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideGroupListAdapterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideGroupListPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideGroupSpinnerAdapterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideHelpPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideInboxAdapterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideInboxPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideIncomingCallPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideIntroPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideLinearLayoutManagerFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideLocationProviderClientFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideLoginPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideLogoutPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideMainPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideMessageViewPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideNavigationAdapterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideNotificationAttachmentAdapterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideNotificationDetailPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideNotificationSettingsAdapterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideNotificationSettingsPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideResetPasswordPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideRxPermissionsFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideSchedulerProviderFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideSettingsPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideSignupDemographicsPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideSignupPasswordPresenterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideSpinnerAdapterFactory;
import com.sca.in_telligent.di.module.ActivityModule_ProvideSplashPresenterFactory;
import com.sca.in_telligent.ui.auth.forgot.ForgotPasswordDialog;
import com.sca.in_telligent.ui.auth.forgot.ForgotPasswordDialog_MembersInjector;
import com.sca.in_telligent.ui.auth.forgot.ForgotPasswordMvpPresenter;
import com.sca.in_telligent.ui.auth.forgot.ForgotPasswordMvpView;
import com.sca.in_telligent.ui.auth.forgot.ForgotPasswordPresenter;
import com.sca.in_telligent.ui.auth.forgot.ForgotPasswordPresenter_Factory;
import com.sca.in_telligent.ui.auth.login.LoginActivity;
import com.sca.in_telligent.ui.auth.login.LoginActivity_MembersInjector;
import com.sca.in_telligent.ui.auth.login.LoginMvpPresenter;
import com.sca.in_telligent.ui.auth.login.LoginMvpView;
import com.sca.in_telligent.ui.auth.login.LoginPresenter;
import com.sca.in_telligent.ui.auth.login.LoginPresenter_Factory;
import com.sca.in_telligent.ui.auth.logout.LogoutActivity;
import com.sca.in_telligent.ui.auth.logout.LogoutActivity_MembersInjector;
import com.sca.in_telligent.ui.auth.logout.LogoutMvpPresenter;
import com.sca.in_telligent.ui.auth.logout.LogoutMvpView;
import com.sca.in_telligent.ui.auth.logout.LogoutPresenter;
import com.sca.in_telligent.ui.auth.logout.LogoutPresenter_Factory;
import com.sca.in_telligent.ui.auth.register.SignupDemographicsActivity;
import com.sca.in_telligent.ui.auth.register.SignupDemographicsActivity_MembersInjector;
import com.sca.in_telligent.ui.auth.register.SignupDemographicsMvpPresenter;
import com.sca.in_telligent.ui.auth.register.SignupDemographicsMvpView;
import com.sca.in_telligent.ui.auth.register.SignupDemographicsPresenter;
import com.sca.in_telligent.ui.auth.register.SignupDemographicsPresenter_Factory;
import com.sca.in_telligent.ui.auth.register.SignupPasswordActivity;
import com.sca.in_telligent.ui.auth.register.SignupPasswordActivity_MembersInjector;
import com.sca.in_telligent.ui.auth.register.SignupPasswordMvpPresenter;
import com.sca.in_telligent.ui.auth.register.SignupPasswordMvpView;
import com.sca.in_telligent.ui.auth.register.SignupPasswordPresenter;
import com.sca.in_telligent.ui.auth.register.SignupPasswordPresenter_Factory;
import com.sca.in_telligent.ui.auth.reset.ResetPasswordActivity;
import com.sca.in_telligent.ui.auth.reset.ResetPasswordActivity_MembersInjector;
import com.sca.in_telligent.ui.auth.reset.ResetPasswordMvpPresenter;
import com.sca.in_telligent.ui.auth.reset.ResetPasswordMvpView;
import com.sca.in_telligent.ui.auth.reset.ResetPasswordPresenter;
import com.sca.in_telligent.ui.auth.reset.ResetPasswordPresenter_Factory;
import com.sca.in_telligent.ui.base.BaseActivity_MembersInjector;
import com.sca.in_telligent.ui.base.BasePresenter_MembersInjector;
import com.sca.in_telligent.ui.contact.call.ContactCallFragment;
import com.sca.in_telligent.ui.contact.call.ContactCallFragment_MembersInjector;
import com.sca.in_telligent.ui.contact.call.ContactCallMvpPresenter;
import com.sca.in_telligent.ui.contact.call.ContactCallMvpView;
import com.sca.in_telligent.ui.contact.call.ContactCallPresenter;
import com.sca.in_telligent.ui.contact.call.ContactCallPresenter_Factory;
import com.sca.in_telligent.ui.contact.list.ContactListFragment;
import com.sca.in_telligent.ui.contact.list.ContactListFragment_MembersInjector;
import com.sca.in_telligent.ui.contact.list.ContactListGroupAdapter;
import com.sca.in_telligent.ui.contact.list.ContactListMvpPresenter;
import com.sca.in_telligent.ui.contact.list.ContactListMvpView;
import com.sca.in_telligent.ui.contact.list.ContactListPresenter;
import com.sca.in_telligent.ui.contact.list.ContactListPresenter_Factory;
import com.sca.in_telligent.ui.contact.message.ContactMessageFragment;
import com.sca.in_telligent.ui.contact.message.ContactMessageFragment_MembersInjector;
import com.sca.in_telligent.ui.contact.message.ContactMessageMvpPresenter;
import com.sca.in_telligent.ui.contact.message.ContactMessageMvpView;
import com.sca.in_telligent.ui.contact.message.ContactMessagePresenter;
import com.sca.in_telligent.ui.contact.message.ContactMessagePresenter_Factory;
import com.sca.in_telligent.ui.contact.message.ContactMessageSpinnerAdapter;
import com.sca.in_telligent.ui.contact.message.deliver.ContactDeliverDialog;
import com.sca.in_telligent.ui.contact.message.deliver.ContactDeliverDialog_MembersInjector;
import com.sca.in_telligent.ui.contact.message.deliver.ContactDeliverListAdapter;
import com.sca.in_telligent.ui.contact.message.deliver.ContactDeliverMvpPresenter;
import com.sca.in_telligent.ui.contact.message.deliver.ContactDeliverMvpView;
import com.sca.in_telligent.ui.contact.message.deliver.ContactDeliverPresenter;
import com.sca.in_telligent.ui.contact.message.deliver.ContactDeliverPresenter_Factory;
import com.sca.in_telligent.ui.findlocation.FindLocationDialog;
import com.sca.in_telligent.ui.findlocation.FindLocationDialog_MembersInjector;
import com.sca.in_telligent.ui.findlocation.FindLocationMvpPresenter;
import com.sca.in_telligent.ui.findlocation.FindLocationMvpView;
import com.sca.in_telligent.ui.findlocation.FindLocationPresenter;
import com.sca.in_telligent.ui.findlocation.FindLocationPresenter_Factory;
import com.sca.in_telligent.ui.group.alert.detail.AlertDetailFragment;
import com.sca.in_telligent.ui.group.alert.detail.AlertDetailFragment_MembersInjector;
import com.sca.in_telligent.ui.group.alert.detail.AlertDetailMvpPresenter;
import com.sca.in_telligent.ui.group.alert.detail.AlertDetailMvpView;
import com.sca.in_telligent.ui.group.alert.detail.AlertDetailPresenter;
import com.sca.in_telligent.ui.group.alert.detail.AlertDetailPresenter_Factory;
import com.sca.in_telligent.ui.group.alert.list.AlertListAdapter;
import com.sca.in_telligent.ui.group.alert.list.AlertListFragment;
import com.sca.in_telligent.ui.group.alert.list.AlertListFragment_MembersInjector;
import com.sca.in_telligent.ui.group.alert.list.AlertListMvpPresenter;
import com.sca.in_telligent.ui.group.alert.list.AlertListMvpView;
import com.sca.in_telligent.ui.group.alert.list.AlertListPresenter;
import com.sca.in_telligent.ui.group.alert.list.AlertListPresenter_Factory;
import com.sca.in_telligent.ui.group.detail.other.GroupDetailFragment;
import com.sca.in_telligent.ui.group.detail.other.GroupDetailFragment_MembersInjector;
import com.sca.in_telligent.ui.group.detail.other.GroupDetailMvpPresenter;
import com.sca.in_telligent.ui.group.detail.other.GroupDetailMvpView;
import com.sca.in_telligent.ui.group.detail.other.GroupDetailPresenter;
import com.sca.in_telligent.ui.group.detail.other.GroupDetailPresenter_Factory;
import com.sca.in_telligent.ui.group.generate.GenerateGroupFragment;
import com.sca.in_telligent.ui.group.generate.GenerateGroupFragment_MembersInjector;
import com.sca.in_telligent.ui.group.generate.GenerateGroupMvpPresenter;
import com.sca.in_telligent.ui.group.generate.GenerateGroupMvpView;
import com.sca.in_telligent.ui.group.generate.GenerateGroupPresenter;
import com.sca.in_telligent.ui.group.generate.GenerateGroupPresenter_Factory;
import com.sca.in_telligent.ui.group.list.GroupListAdapter;
import com.sca.in_telligent.ui.group.list.GroupListFragment;
import com.sca.in_telligent.ui.group.list.GroupListFragment_MembersInjector;
import com.sca.in_telligent.ui.group.list.GroupListMvpPresenter;
import com.sca.in_telligent.ui.group.list.GroupListMvpView;
import com.sca.in_telligent.ui.group.list.GroupListPresenter;
import com.sca.in_telligent.ui.group.list.GroupListPresenter_Factory;
import com.sca.in_telligent.ui.group.list.GroupListSpinnerAdapter;
import com.sca.in_telligent.ui.inbox.AttachmentPreviewDialog;
import com.sca.in_telligent.ui.inbox.InboxAdapter;
import com.sca.in_telligent.ui.inbox.InboxFragment;
import com.sca.in_telligent.ui.inbox.InboxFragment_MembersInjector;
import com.sca.in_telligent.ui.inbox.InboxMvpPresenter;
import com.sca.in_telligent.ui.inbox.InboxMvpView;
import com.sca.in_telligent.ui.inbox.InboxPresenter;
import com.sca.in_telligent.ui.inbox.InboxPresenter_Factory;
import com.sca.in_telligent.ui.inbox.InboxSpinnerAdapter;
import com.sca.in_telligent.ui.intro.IntroActivity;
import com.sca.in_telligent.ui.intro.IntroActivity_MembersInjector;
import com.sca.in_telligent.ui.intro.IntroMvpPresenter;
import com.sca.in_telligent.ui.intro.IntroMvpView;
import com.sca.in_telligent.ui.intro.IntroPresenter;
import com.sca.in_telligent.ui.intro.IntroPresenter_Factory;
import com.sca.in_telligent.ui.main.MainActivity;
import com.sca.in_telligent.ui.main.MainActivity_MembersInjector;
import com.sca.in_telligent.ui.main.MainMvpPresenter;
import com.sca.in_telligent.ui.main.MainMvpView;
import com.sca.in_telligent.ui.main.MainPresenter;
import com.sca.in_telligent.ui.main.MainPresenter_Factory;
import com.sca.in_telligent.ui.main.NavigationDrawerAdapter;
import com.sca.in_telligent.ui.notificationdetail.NotificationAttachmentAdapter;
import com.sca.in_telligent.ui.notificationdetail.NotificationDetailFragment;
import com.sca.in_telligent.ui.notificationdetail.NotificationDetailFragment_MembersInjector;
import com.sca.in_telligent.ui.notificationdetail.NotificationDetailMvpPresenter;
import com.sca.in_telligent.ui.notificationdetail.NotificationDetailMvpView;
import com.sca.in_telligent.ui.notificationdetail.NotificationDetailPresenter;
import com.sca.in_telligent.ui.notificationdetail.NotificationDetailPresenter_Factory;
import com.sca.in_telligent.ui.popup.IncomingCallActivity;
import com.sca.in_telligent.ui.popup.IncomingCallActivity_MembersInjector;
import com.sca.in_telligent.ui.popup.IncomingCallMvpPresenter;
import com.sca.in_telligent.ui.popup.IncomingCallMvpView;
import com.sca.in_telligent.ui.popup.IncomingCallPresenter;
import com.sca.in_telligent.ui.popup.IncomingCallPresenter_Factory;
import com.sca.in_telligent.ui.popup.LifeSafetyPopupActivity;
import com.sca.in_telligent.ui.popup.PersonalSafetyPopupActivity;
import com.sca.in_telligent.ui.preview.MessageViewDialog;
import com.sca.in_telligent.ui.preview.MessageViewDialog_MembersInjector;
import com.sca.in_telligent.ui.preview.MessageViewMvpPresenter;
import com.sca.in_telligent.ui.preview.MessageViewMvpView;
import com.sca.in_telligent.ui.preview.MessageViewPresenter;
import com.sca.in_telligent.ui.preview.MessageViewPresenter_Factory;
import com.sca.in_telligent.ui.settings.SettingsFragment;
import com.sca.in_telligent.ui.settings.SettingsFragment_MembersInjector;
import com.sca.in_telligent.ui.settings.SettingsMvpPresenter;
import com.sca.in_telligent.ui.settings.SettingsMvpView;
import com.sca.in_telligent.ui.settings.SettingsPresenter;
import com.sca.in_telligent.ui.settings.SettingsPresenter_Factory;
import com.sca.in_telligent.ui.settings.account.AccountSettingsFragment;
import com.sca.in_telligent.ui.settings.account.AccountSettingsFragment_MembersInjector;
import com.sca.in_telligent.ui.settings.account.AccountSettingsMvpPresenter;
import com.sca.in_telligent.ui.settings.account.AccountSettingsMvpView;
import com.sca.in_telligent.ui.settings.account.AccountSettingsPresenter;
import com.sca.in_telligent.ui.settings.account.AccountSettingsPresenter_Factory;
import com.sca.in_telligent.ui.settings.help.HelpFragment;
import com.sca.in_telligent.ui.settings.help.HelpFragment_MembersInjector;
import com.sca.in_telligent.ui.settings.help.HelpMvpPresenter;
import com.sca.in_telligent.ui.settings.help.HelpMvpView;
import com.sca.in_telligent.ui.settings.help.HelpPresenter;
import com.sca.in_telligent.ui.settings.help.HelpPresenter_Factory;
import com.sca.in_telligent.ui.settings.notification.NotificationSettingAdapter;
import com.sca.in_telligent.ui.settings.notification.NotificationSettingsFragment;
import com.sca.in_telligent.ui.settings.notification.NotificationSettingsFragment_MembersInjector;
import com.sca.in_telligent.ui.settings.notification.NotificationSettingsMvpPresenter;
import com.sca.in_telligent.ui.settings.notification.NotificationSettingsMvpView;
import com.sca.in_telligent.ui.settings.notification.NotificationSettingsPresenter;
import com.sca.in_telligent.ui.settings.notification.NotificationSettingsPresenter_Factory;
import com.sca.in_telligent.ui.splash.SplashActivity;
import com.sca.in_telligent.ui.splash.SplashActivity_MembersInjector;
import com.sca.in_telligent.ui.splash.SplashMvpPresenter;
import com.sca.in_telligent.ui.splash.SplashMvpView;
import com.sca.in_telligent.ui.splash.SplashPresenter;
import com.sca.in_telligent.ui.splash.SplashPresenter_Factory;
import com.sca.in_telligent.util.rx.SchedulerProvider;
import com.sca.in_telligent.util.twilio.TwilioUtil;
import com.tbruyelle.rxpermissions3.RxPermissions;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import io.reactivex.rxjava3.disposables.CompositeDisposable;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerActivityComponent {
  private DaggerActivityComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ActivityModule activityModule;

    private ApplicationComponent applicationComponent;

    private Builder() {
    }

    public Builder activityModule(ActivityModule activityModule) {
      this.activityModule = Preconditions.checkNotNull(activityModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }

    public ActivityComponent build() {
      Preconditions.checkBuilderRequirement(activityModule, ActivityModule.class);
      Preconditions.checkBuilderRequirement(applicationComponent, ApplicationComponent.class);
      return new ActivityComponentImpl(activityModule, applicationComponent);
    }
  }

  private static final class ActivityComponentImpl implements ActivityComponent {
    private final ApplicationComponent applicationComponent;

    private final ActivityModule activityModule;

    private final ActivityComponentImpl activityComponentImpl = this;

    private Provider<DataManager> getDataManagerProvider;

    private Provider<SchedulerProvider> provideSchedulerProvider;

    private Provider<CompositeDisposable> provideCompositeDisposableProvider;

    private Provider<RxPermissions> provideRxPermissionsProvider;

    private Provider<TwilioUtil> getTwilioUtilProvider;

    private Provider<MainPresenter<MainMvpView>> mainPresenterProvider;

    private Provider<MainMvpPresenter<MainMvpView>> provideMainPresenterProvider;

    private Provider<SplashPresenter<SplashMvpView>> splashPresenterProvider;

    private Provider<SplashMvpPresenter<SplashMvpView>> provideSplashPresenterProvider;

    private Provider<LoginPresenter<LoginMvpView>> loginPresenterProvider;

    private Provider<LoginMvpPresenter<LoginMvpView>> provideLoginPresenterProvider;

    private Provider<LogoutPresenter<LogoutMvpView>> logoutPresenterProvider;

    private Provider<LogoutMvpPresenter<LogoutMvpView>> provideLogoutPresenterProvider;

    private Provider<IntroPresenter<IntroMvpView>> introPresenterProvider;

    private Provider<IntroMvpPresenter<IntroMvpView>> provideIntroPresenterProvider;

    private Provider<SignupDemographicsPresenter<SignupDemographicsMvpView>> signupDemographicsPresenterProvider;

    private Provider<SignupDemographicsMvpPresenter<SignupDemographicsMvpView>> provideSignupDemographicsPresenterProvider;

    private Provider<SignupPasswordPresenter<SignupPasswordMvpView>> signupPasswordPresenterProvider;

    private Provider<SignupPasswordMvpPresenter<SignupPasswordMvpView>> provideSignupPasswordPresenterProvider;

    private Provider<ResetPasswordPresenter<ResetPasswordMvpView>> resetPasswordPresenterProvider;

    private Provider<ResetPasswordMvpPresenter<ResetPasswordMvpView>> provideResetPasswordPresenterProvider;

    private Provider<IncomingCallPresenter<IncomingCallMvpView>> incomingCallPresenterProvider;

    private Provider<IncomingCallMvpPresenter<IncomingCallMvpView>> provideIncomingCallPresenterProvider;

    private ActivityComponentImpl(ActivityModule activityModuleParam,
        ApplicationComponent applicationComponentParam) {
      this.applicationComponent = applicationComponentParam;
      this.activityModule = activityModuleParam;
      initialize(activityModuleParam, applicationComponentParam);

    }

    private FusedLocationProviderClient fusedLocationProviderClient() {
      return ActivityModule_ProvideLocationProviderClientFactory.provideLocationProviderClient(activityModule, ActivityModule_ProvideActivityFactory.provideActivity(activityModule));
    }

    private NavigationDrawerAdapter navigationDrawerAdapter() {
      return ActivityModule_ProvideNavigationAdapterFactory.provideNavigationAdapter(activityModule, ActivityModule_ProvideActivityFactory.provideActivity(activityModule));
    }

    private LinearLayoutManager linearLayoutManager() {
      return ActivityModule_ProvideLinearLayoutManagerFactory.provideLinearLayoutManager(activityModule, ActivityModule_ProvideActivityFactory.provideActivity(activityModule));
    }

    private ForgotPasswordPresenter<ForgotPasswordMvpView> forgotPasswordPresenterOfForgotPasswordMvpView(
        ) {
      return injectForgotPasswordPresenter(ForgotPasswordPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private ForgotPasswordMvpPresenter<ForgotPasswordMvpView> forgotPasswordMvpPresenterOfForgotPasswordMvpView(
        ) {
      return ActivityModule_ProvideForgotPasswordPresenterFactory.provideForgotPasswordPresenter(activityModule, forgotPasswordPresenterOfForgotPasswordMvpView());
    }

    private InboxAdapter inboxAdapter() {
      return ActivityModule_ProvideInboxAdapterFactory.provideInboxAdapter(activityModule, ActivityModule_ProvideActivityFactory.provideActivity(activityModule));
    }

    private InboxPresenter<InboxMvpView> inboxPresenterOfInboxMvpView() {
      return injectInboxPresenter(InboxPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private InboxMvpPresenter<InboxMvpView> inboxMvpPresenterOfInboxMvpView() {
      return ActivityModule_ProvideInboxPresenterFactory.provideInboxPresenter(activityModule, inboxPresenterOfInboxMvpView());
    }

    private InboxSpinnerAdapter inboxSpinnerAdapter() {
      return ActivityModule_ProvideSpinnerAdapterFactory.provideSpinnerAdapter(activityModule, ActivityModule_ProvideActivityFactory.provideActivity(activityModule));
    }

    private NotificationDetailPresenter<NotificationDetailMvpView> notificationDetailPresenterOfNotificationDetailMvpView(
        ) {
      return injectNotificationDetailPresenter(NotificationDetailPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private NotificationDetailMvpPresenter<NotificationDetailMvpView> notificationDetailMvpPresenterOfNotificationDetailMvpView(
        ) {
      return ActivityModule_ProvideNotificationDetailPresenterFactory.provideNotificationDetailPresenter(activityModule, notificationDetailPresenterOfNotificationDetailMvpView());
    }

    private NotificationAttachmentAdapter notificationAttachmentAdapter() {
      return ActivityModule_ProvideNotificationAttachmentAdapterFactory.provideNotificationAttachmentAdapter(activityModule, ActivityModule_ProvideActivityFactory.provideActivity(activityModule));
    }

    private ContactListPresenter<ContactListMvpView> contactListPresenterOfContactListMvpView() {
      return injectContactListPresenter(ContactListPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private ContactListMvpPresenter<ContactListMvpView> contactListMvpPresenterOfContactListMvpView(
        ) {
      return ActivityModule_ProvideContactListPresenterFactory.provideContactListPresenter(activityModule, contactListPresenterOfContactListMvpView());
    }

    private ContactListGroupAdapter contactListGroupAdapter() {
      return ActivityModule_ProvideContactListGroupAdapterFactory.provideContactListGroupAdapter(activityModule, ActivityModule_ProvideActivityFactory.provideActivity(activityModule));
    }

    private ContactMessagePresenter<ContactMessageMvpView> contactMessagePresenterOfContactMessageMvpView(
        ) {
      return injectContactMessagePresenter(ContactMessagePresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private ContactMessageMvpPresenter<ContactMessageMvpView> contactMessageMvpPresenterOfContactMessageMvpView(
        ) {
      return ActivityModule_ProvideContactMessagePresenterFactory.provideContactMessagePresenter(activityModule, contactMessagePresenterOfContactMessageMvpView());
    }

    private ContactMessageSpinnerAdapter contactMessageSpinnerAdapter() {
      return ActivityModule_ProvideContactSpinnerAdapterFactory.provideContactSpinnerAdapter(activityModule, ActivityModule_ProvideActivityFactory.provideActivity(activityModule));
    }

    private ContactCallPresenter<ContactCallMvpView> contactCallPresenterOfContactCallMvpView() {
      return injectContactCallPresenter(ContactCallPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private ContactCallMvpPresenter<ContactCallMvpView> contactCallMvpPresenterOfContactCallMvpView(
        ) {
      return ActivityModule_ProvideContactCallPresenterFactory.provideContactCallPresenter(activityModule, contactCallPresenterOfContactCallMvpView());
    }

    private GroupListAdapter groupListAdapter() {
      return ActivityModule_ProvideGroupListAdapterFactory.provideGroupListAdapter(activityModule, ActivityModule_ProvideActivityFactory.provideActivity(activityModule));
    }

    private GroupListPresenter<GroupListMvpView> groupListPresenterOfGroupListMvpView() {
      return injectGroupListPresenter(GroupListPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private GroupListMvpPresenter<GroupListMvpView> groupListMvpPresenterOfGroupListMvpView() {
      return ActivityModule_ProvideGroupListPresenterFactory.provideGroupListPresenter(activityModule, groupListPresenterOfGroupListMvpView());
    }

    private GroupListSpinnerAdapter groupListSpinnerAdapter() {
      return ActivityModule_ProvideGroupSpinnerAdapterFactory.provideGroupSpinnerAdapter(activityModule, ActivityModule_ProvideActivityFactory.provideActivity(activityModule));
    }

    private GroupDetailPresenter<GroupDetailMvpView> groupDetailPresenterOfGroupDetailMvpView() {
      return injectGroupDetailPresenter(GroupDetailPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private GroupDetailMvpPresenter<GroupDetailMvpView> groupDetailMvpPresenterOfGroupDetailMvpView(
        ) {
      return ActivityModule_ProvideGroupDetailPresenterFactory.provideGroupDetailPresenter(activityModule, groupDetailPresenterOfGroupDetailMvpView());
    }

    private GenerateGroupPresenter<GenerateGroupMvpView> generateGroupPresenterOfGenerateGroupMvpView(
        ) {
      return injectGenerateGroupPresenter(GenerateGroupPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private GenerateGroupMvpPresenter<GenerateGroupMvpView> generateGroupMvpPresenterOfGenerateGroupMvpView(
        ) {
      return ActivityModule_ProvideGenerateGroupPresenterFactory.provideGenerateGroupPresenter(activityModule, generateGroupPresenterOfGenerateGroupMvpView());
    }

    private AlertListAdapter alertListAdapter() {
      return ActivityModule_ProvideAlertListAdapterFactory.provideAlertListAdapter(activityModule, ActivityModule_ProvideActivityFactory.provideActivity(activityModule));
    }

    private AlertListPresenter<AlertListMvpView> alertListPresenterOfAlertListMvpView() {
      return injectAlertListPresenter(AlertListPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private AlertListMvpPresenter<AlertListMvpView> alertListMvpPresenterOfAlertListMvpView() {
      return ActivityModule_ProvideAlertListPresenterFactory.provideAlertListPresenter(activityModule, alertListPresenterOfAlertListMvpView());
    }

    private AlertDetailPresenter<AlertDetailMvpView> alertDetailPresenterOfAlertDetailMvpView() {
      return injectAlertDetailPresenter(AlertDetailPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private AlertDetailMvpPresenter<AlertDetailMvpView> alertDetailMvpPresenterOfAlertDetailMvpView(
        ) {
      return ActivityModule_ProvideAlertDetailPresenterFactory.provideAlertDetailPresenter(activityModule, alertDetailPresenterOfAlertDetailMvpView());
    }

    private SettingsPresenter<SettingsMvpView> settingsPresenterOfSettingsMvpView() {
      return injectSettingsPresenter(SettingsPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private SettingsMvpPresenter<SettingsMvpView> settingsMvpPresenterOfSettingsMvpView() {
      return ActivityModule_ProvideSettingsPresenterFactory.provideSettingsPresenter(activityModule, settingsPresenterOfSettingsMvpView());
    }

    private AccountSettingsPresenter<AccountSettingsMvpView> accountSettingsPresenterOfAccountSettingsMvpView(
        ) {
      return injectAccountSettingsPresenter(AccountSettingsPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private AccountSettingsMvpPresenter<AccountSettingsMvpView> accountSettingsMvpPresenterOfAccountSettingsMvpView(
        ) {
      return ActivityModule_ProvideAccountSettingsPresenterFactory.provideAccountSettingsPresenter(activityModule, accountSettingsPresenterOfAccountSettingsMvpView());
    }

    private NotificationSettingsPresenter<NotificationSettingsMvpView> notificationSettingsPresenterOfNotificationSettingsMvpView(
        ) {
      return injectNotificationSettingsPresenter(NotificationSettingsPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private NotificationSettingsMvpPresenter<NotificationSettingsMvpView> notificationSettingsMvpPresenterOfNotificationSettingsMvpView(
        ) {
      return ActivityModule_ProvideNotificationSettingsPresenterFactory.provideNotificationSettingsPresenter(activityModule, notificationSettingsPresenterOfNotificationSettingsMvpView());
    }

    private NotificationSettingAdapter notificationSettingAdapter() {
      return ActivityModule_ProvideNotificationSettingsAdapterFactory.provideNotificationSettingsAdapter(activityModule, ActivityModule_ProvideActivityFactory.provideActivity(activityModule));
    }

    private HelpPresenter<HelpMvpView> helpPresenterOfHelpMvpView() {
      return injectHelpPresenter(HelpPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private HelpMvpPresenter<HelpMvpView> helpMvpPresenterOfHelpMvpView() {
      return ActivityModule_ProvideHelpPresenterFactory.provideHelpPresenter(activityModule, helpPresenterOfHelpMvpView());
    }

    private ContactDeliverPresenter<ContactDeliverMvpView> contactDeliverPresenterOfContactDeliverMvpView(
        ) {
      return injectContactDeliverPresenter(ContactDeliverPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private ContactDeliverMvpPresenter<ContactDeliverMvpView> contactDeliverMvpPresenterOfContactDeliverMvpView(
        ) {
      return ActivityModule_ProvideContactDeliverPresenterFactory.provideContactDeliverPresenter(activityModule, contactDeliverPresenterOfContactDeliverMvpView());
    }

    private ContactDeliverListAdapter contactDeliverListAdapter() {
      return ActivityModule_ProvideContactDeliverListAdapterFactory.provideContactDeliverListAdapter(activityModule, ActivityModule_ProvideActivityFactory.provideActivity(activityModule));
    }

    private MessageViewPresenter<MessageViewMvpView> messageViewPresenterOfMessageViewMvpView() {
      return injectMessageViewPresenter(MessageViewPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private MessageViewMvpPresenter<MessageViewMvpView> messageViewMvpPresenterOfMessageViewMvpView(
        ) {
      return ActivityModule_ProvideMessageViewPresenterFactory.provideMessageViewPresenter(activityModule, messageViewPresenterOfMessageViewMvpView());
    }

    private FindLocationPresenter<FindLocationMvpView> findLocationPresenterOfFindLocationMvpView(
        ) {
      return injectFindLocationPresenter(FindLocationPresenter_Factory.newInstance(Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()), ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule), ActivityModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(activityModule)));
    }

    private FindLocationMvpPresenter<FindLocationMvpView> findLocationMvpPresenterOfFindLocationMvpView(
        ) {
      return ActivityModule_ProvideFindLocationPresenterFactory.provideFindLocationPresenter(activityModule, findLocationPresenterOfFindLocationMvpView());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ActivityModule activityModuleParam,
        final ApplicationComponent applicationComponentParam) {
      this.getDataManagerProvider = new GetDataManagerProvider(applicationComponentParam);
      this.provideSchedulerProvider = ActivityModule_ProvideSchedulerProviderFactory.create(activityModuleParam);
      this.provideCompositeDisposableProvider = ActivityModule_ProvideCompositeDisposableFactory.create(activityModuleParam);
      this.provideRxPermissionsProvider = ActivityModule_ProvideRxPermissionsFactory.create(activityModuleParam);
      this.getTwilioUtilProvider = new GetTwilioUtilProvider(applicationComponentParam);
      this.mainPresenterProvider = MainPresenter_Factory.create(getDataManagerProvider, provideSchedulerProvider, provideCompositeDisposableProvider, provideRxPermissionsProvider, getTwilioUtilProvider);
      this.provideMainPresenterProvider = DoubleCheck.provider(ActivityModule_ProvideMainPresenterFactory.create(activityModuleParam, mainPresenterProvider));
      this.splashPresenterProvider = SplashPresenter_Factory.create(getDataManagerProvider, provideSchedulerProvider, provideCompositeDisposableProvider, provideRxPermissionsProvider, getTwilioUtilProvider);
      this.provideSplashPresenterProvider = DoubleCheck.provider(ActivityModule_ProvideSplashPresenterFactory.create(activityModuleParam, splashPresenterProvider));
      this.loginPresenterProvider = LoginPresenter_Factory.create(getDataManagerProvider, provideSchedulerProvider, provideCompositeDisposableProvider, provideRxPermissionsProvider, getTwilioUtilProvider);
      this.provideLoginPresenterProvider = DoubleCheck.provider(ActivityModule_ProvideLoginPresenterFactory.create(activityModuleParam, loginPresenterProvider));
      this.logoutPresenterProvider = LogoutPresenter_Factory.create(getDataManagerProvider, provideSchedulerProvider, provideCompositeDisposableProvider, provideRxPermissionsProvider, getTwilioUtilProvider);
      this.provideLogoutPresenterProvider = DoubleCheck.provider(ActivityModule_ProvideLogoutPresenterFactory.create(activityModuleParam, logoutPresenterProvider));
      this.introPresenterProvider = IntroPresenter_Factory.create(getDataManagerProvider, provideSchedulerProvider, provideCompositeDisposableProvider, provideRxPermissionsProvider, getTwilioUtilProvider);
      this.provideIntroPresenterProvider = DoubleCheck.provider(ActivityModule_ProvideIntroPresenterFactory.create(activityModuleParam, introPresenterProvider));
      this.signupDemographicsPresenterProvider = SignupDemographicsPresenter_Factory.create(getDataManagerProvider, provideSchedulerProvider, provideCompositeDisposableProvider, provideRxPermissionsProvider, getTwilioUtilProvider);
      this.provideSignupDemographicsPresenterProvider = DoubleCheck.provider(ActivityModule_ProvideSignupDemographicsPresenterFactory.create(activityModuleParam, signupDemographicsPresenterProvider));
      this.signupPasswordPresenterProvider = SignupPasswordPresenter_Factory.create(getDataManagerProvider, provideSchedulerProvider, provideCompositeDisposableProvider, provideRxPermissionsProvider, getTwilioUtilProvider);
      this.provideSignupPasswordPresenterProvider = DoubleCheck.provider(ActivityModule_ProvideSignupPasswordPresenterFactory.create(activityModuleParam, signupPasswordPresenterProvider));
      this.resetPasswordPresenterProvider = ResetPasswordPresenter_Factory.create(getDataManagerProvider, provideSchedulerProvider, provideCompositeDisposableProvider, provideRxPermissionsProvider, getTwilioUtilProvider);
      this.provideResetPasswordPresenterProvider = DoubleCheck.provider(ActivityModule_ProvideResetPasswordPresenterFactory.create(activityModuleParam, resetPasswordPresenterProvider));
      this.incomingCallPresenterProvider = IncomingCallPresenter_Factory.create(getDataManagerProvider, provideSchedulerProvider, provideCompositeDisposableProvider, provideRxPermissionsProvider, getTwilioUtilProvider);
      this.provideIncomingCallPresenterProvider = DoubleCheck.provider(ActivityModule_ProvideIncomingCallPresenterFactory.create(activityModuleParam, incomingCallPresenterProvider));
    }

    @Override
    public void inject(MainActivity activity) {
      injectMainActivity(activity);
    }

    @Override
    public void inject(SplashActivity activity) {
      injectSplashActivity(activity);
    }

    @Override
    public void inject(LoginActivity activity) {
      injectLoginActivity(activity);
    }

    @Override
    public void inject(LogoutActivity activity) {
      injectLogoutActivity(activity);
    }

    @Override
    public void inject(IntroActivity activity) {
      injectIntroActivity(activity);
    }

    @Override
    public void inject(SignupDemographicsActivity activity) {
      injectSignupDemographicsActivity(activity);
    }

    @Override
    public void inject(SignupPasswordActivity activity) {
      injectSignupPasswordActivity(activity);
    }

    @Override
    public void inject(ForgotPasswordDialog dialog) {
      injectForgotPasswordDialog(dialog);
    }

    @Override
    public void inject(ResetPasswordActivity activity) {
      injectResetPasswordActivity(activity);
    }

    @Override
    public void inject(InboxFragment fragment) {
      injectInboxFragment(fragment);
    }

    @Override
    public void inject(NotificationDetailFragment fragment) {
      injectNotificationDetailFragment(fragment);
    }

    @Override
    public void inject(AttachmentPreviewDialog dialog) {
    }

    @Override
    public void inject(ContactListFragment fragment) {
      injectContactListFragment(fragment);
    }

    @Override
    public void inject(ContactMessageFragment fragment) {
      injectContactMessageFragment(fragment);
    }

    @Override
    public void inject(ContactCallFragment fragment) {
      injectContactCallFragment(fragment);
    }

    @Override
    public void inject(GroupListFragment fragment) {
      injectGroupListFragment(fragment);
    }

    @Override
    public void inject(GroupDetailFragment fragment) {
      injectGroupDetailFragment(fragment);
    }

    @Override
    public void inject(GenerateGroupFragment fragment) {
      injectGenerateGroupFragment(fragment);
    }

    @Override
    public void inject(AlertListFragment fragment) {
      injectAlertListFragment(fragment);
    }

    @Override
    public void inject(AlertDetailFragment fragment) {
      injectAlertDetailFragment(fragment);
    }

    @Override
    public void inject(SettingsFragment fragment) {
      injectSettingsFragment(fragment);
    }

    @Override
    public void inject(AccountSettingsFragment fragment) {
      injectAccountSettingsFragment(fragment);
    }

    @Override
    public void inject(NotificationSettingsFragment fragment) {
      injectNotificationSettingsFragment(fragment);
    }

    @Override
    public void inject(HelpFragment fragment) {
      injectHelpFragment(fragment);
    }

    @Override
    public void inject(ContactDeliverDialog dialog) {
      injectContactDeliverDialog(dialog);
    }

    @Override
    public void inject(MessageViewDialog dialog) {
      injectMessageViewDialog(dialog);
    }

    @Override
    public void inject(FindLocationDialog dialog) {
      injectFindLocationDialog(dialog);
    }

    @Override
    public void inject(LifeSafetyPopupActivity activity) {
      injectLifeSafetyPopupActivity(activity);
    }

    @Override
    public void inject(PersonalSafetyPopupActivity activity) {
      injectPersonalSafetyPopupActivity(activity);
    }

    @Override
    public void inject(IncomingCallActivity activity) {
      injectIncomingCallActivity(activity);
    }

    @CanIgnoreReturnValue
    private MainActivity injectMainActivity(MainActivity instance) {
      BaseActivity_MembersInjector.injectAudioHelper(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioHelper()));
      BaseActivity_MembersInjector.injectAudioManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioManager()));
      BaseActivity_MembersInjector.injectDataManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()));
      BaseActivity_MembersInjector.injectFusedLocationProviderClient(instance, fusedLocationProviderClient());
      BaseActivity_MembersInjector.injectLocationUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getLocationUtil()));
      BaseActivity_MembersInjector.injectResponder(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getResponder()));
      BaseActivity_MembersInjector.injectVideoDownloader(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getVideoDownloader()));
      MainActivity_MembersInjector.injectAdapter(instance, navigationDrawerAdapter());
      MainActivity_MembersInjector.injectWorkManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getWorkManager()));
      MainActivity_MembersInjector.injectMGeofenceClient(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getGeofenceClient()));
      MainActivity_MembersInjector.injectMLayoutManager(instance, linearLayoutManager());
      MainActivity_MembersInjector.injectMPresenter(instance, provideMainPresenterProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private SplashActivity injectSplashActivity(SplashActivity instance) {
      BaseActivity_MembersInjector.injectAudioHelper(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioHelper()));
      BaseActivity_MembersInjector.injectAudioManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioManager()));
      BaseActivity_MembersInjector.injectDataManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()));
      BaseActivity_MembersInjector.injectFusedLocationProviderClient(instance, fusedLocationProviderClient());
      BaseActivity_MembersInjector.injectLocationUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getLocationUtil()));
      BaseActivity_MembersInjector.injectResponder(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getResponder()));
      BaseActivity_MembersInjector.injectVideoDownloader(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getVideoDownloader()));
      SplashActivity_MembersInjector.injectMPresenter(instance, provideSplashPresenterProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private LoginActivity injectLoginActivity(LoginActivity instance) {
      BaseActivity_MembersInjector.injectAudioHelper(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioHelper()));
      BaseActivity_MembersInjector.injectAudioManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioManager()));
      BaseActivity_MembersInjector.injectDataManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()));
      BaseActivity_MembersInjector.injectFusedLocationProviderClient(instance, fusedLocationProviderClient());
      BaseActivity_MembersInjector.injectLocationUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getLocationUtil()));
      BaseActivity_MembersInjector.injectResponder(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getResponder()));
      BaseActivity_MembersInjector.injectVideoDownloader(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getVideoDownloader()));
      LoginActivity_MembersInjector.injectMPresenter(instance, provideLoginPresenterProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private LogoutActivity injectLogoutActivity(LogoutActivity instance) {
      BaseActivity_MembersInjector.injectAudioHelper(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioHelper()));
      BaseActivity_MembersInjector.injectAudioManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioManager()));
      BaseActivity_MembersInjector.injectDataManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()));
      BaseActivity_MembersInjector.injectFusedLocationProviderClient(instance, fusedLocationProviderClient());
      BaseActivity_MembersInjector.injectLocationUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getLocationUtil()));
      BaseActivity_MembersInjector.injectResponder(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getResponder()));
      BaseActivity_MembersInjector.injectVideoDownloader(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getVideoDownloader()));
      LogoutActivity_MembersInjector.injectMPresenter(instance, provideLogoutPresenterProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private IntroActivity injectIntroActivity(IntroActivity instance) {
      BaseActivity_MembersInjector.injectAudioHelper(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioHelper()));
      BaseActivity_MembersInjector.injectAudioManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioManager()));
      BaseActivity_MembersInjector.injectDataManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()));
      BaseActivity_MembersInjector.injectFusedLocationProviderClient(instance, fusedLocationProviderClient());
      BaseActivity_MembersInjector.injectLocationUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getLocationUtil()));
      BaseActivity_MembersInjector.injectResponder(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getResponder()));
      BaseActivity_MembersInjector.injectVideoDownloader(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getVideoDownloader()));
      IntroActivity_MembersInjector.injectMPresenter(instance, provideIntroPresenterProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private SignupDemographicsActivity injectSignupDemographicsActivity(
        SignupDemographicsActivity instance) {
      BaseActivity_MembersInjector.injectAudioHelper(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioHelper()));
      BaseActivity_MembersInjector.injectAudioManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioManager()));
      BaseActivity_MembersInjector.injectDataManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()));
      BaseActivity_MembersInjector.injectFusedLocationProviderClient(instance, fusedLocationProviderClient());
      BaseActivity_MembersInjector.injectLocationUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getLocationUtil()));
      BaseActivity_MembersInjector.injectResponder(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getResponder()));
      BaseActivity_MembersInjector.injectVideoDownloader(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getVideoDownloader()));
      SignupDemographicsActivity_MembersInjector.injectMPresenter(instance, provideSignupDemographicsPresenterProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private SignupPasswordActivity injectSignupPasswordActivity(SignupPasswordActivity instance) {
      BaseActivity_MembersInjector.injectAudioHelper(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioHelper()));
      BaseActivity_MembersInjector.injectAudioManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioManager()));
      BaseActivity_MembersInjector.injectDataManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()));
      BaseActivity_MembersInjector.injectFusedLocationProviderClient(instance, fusedLocationProviderClient());
      BaseActivity_MembersInjector.injectLocationUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getLocationUtil()));
      BaseActivity_MembersInjector.injectResponder(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getResponder()));
      BaseActivity_MembersInjector.injectVideoDownloader(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getVideoDownloader()));
      SignupPasswordActivity_MembersInjector.injectMPresenter(instance, provideSignupPasswordPresenterProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private ForgotPasswordPresenter<ForgotPasswordMvpView> injectForgotPasswordPresenter(
        ForgotPasswordPresenter<ForgotPasswordMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private ForgotPasswordDialog injectForgotPasswordDialog(ForgotPasswordDialog instance) {
      ForgotPasswordDialog_MembersInjector.injectMPresenter(instance, forgotPasswordMvpPresenterOfForgotPasswordMvpView());
      return instance;
    }

    @CanIgnoreReturnValue
    private ResetPasswordActivity injectResetPasswordActivity(ResetPasswordActivity instance) {
      BaseActivity_MembersInjector.injectAudioHelper(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioHelper()));
      BaseActivity_MembersInjector.injectAudioManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioManager()));
      BaseActivity_MembersInjector.injectDataManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()));
      BaseActivity_MembersInjector.injectFusedLocationProviderClient(instance, fusedLocationProviderClient());
      BaseActivity_MembersInjector.injectLocationUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getLocationUtil()));
      BaseActivity_MembersInjector.injectResponder(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getResponder()));
      BaseActivity_MembersInjector.injectVideoDownloader(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getVideoDownloader()));
      ResetPasswordActivity_MembersInjector.injectMPresenter(instance, provideResetPasswordPresenterProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private InboxPresenter<InboxMvpView> injectInboxPresenter(
        InboxPresenter<InboxMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private InboxFragment injectInboxFragment(InboxFragment instance) {
      InboxFragment_MembersInjector.injectInboxAdapter(instance, inboxAdapter());
      InboxFragment_MembersInjector.injectMPresenter(instance, inboxMvpPresenterOfInboxMvpView());
      InboxFragment_MembersInjector.injectMLayoutManager(instance, linearLayoutManager());
      InboxFragment_MembersInjector.injectInboxSpinnerAdapter(instance, inboxSpinnerAdapter());
      return instance;
    }

    @CanIgnoreReturnValue
    private NotificationDetailPresenter<NotificationDetailMvpView> injectNotificationDetailPresenter(
        NotificationDetailPresenter<NotificationDetailMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private NotificationDetailFragment injectNotificationDetailFragment(
        NotificationDetailFragment instance) {
      NotificationDetailFragment_MembersInjector.injectMPresenter(instance, notificationDetailMvpPresenterOfNotificationDetailMvpView());
      NotificationDetailFragment_MembersInjector.injectMLayoutManager(instance, linearLayoutManager());
      NotificationDetailFragment_MembersInjector.injectAttachmentAdapter(instance, notificationAttachmentAdapter());
      return instance;
    }

    @CanIgnoreReturnValue
    private ContactListPresenter<ContactListMvpView> injectContactListPresenter(
        ContactListPresenter<ContactListMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private ContactListFragment injectContactListFragment(ContactListFragment instance) {
      ContactListFragment_MembersInjector.injectMPresenter(instance, contactListMvpPresenterOfContactListMvpView());
      ContactListFragment_MembersInjector.injectMLayoutManager(instance, linearLayoutManager());
      ContactListFragment_MembersInjector.injectContactListAdapter(instance, contactListGroupAdapter());
      return instance;
    }

    @CanIgnoreReturnValue
    private ContactMessagePresenter<ContactMessageMvpView> injectContactMessagePresenter(
        ContactMessagePresenter<ContactMessageMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private ContactMessageFragment injectContactMessageFragment(ContactMessageFragment instance) {
      ContactMessageFragment_MembersInjector.injectMPresenter(instance, contactMessageMvpPresenterOfContactMessageMvpView());
      ContactMessageFragment_MembersInjector.injectContactAlertSpinnerAdapter(instance, contactMessageSpinnerAdapter());
      ContactMessageFragment_MembersInjector.injectContactSendSpinnerAdapter(instance, contactMessageSpinnerAdapter());
      return instance;
    }

    @CanIgnoreReturnValue
    private ContactCallPresenter<ContactCallMvpView> injectContactCallPresenter(
        ContactCallPresenter<ContactCallMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private ContactCallFragment injectContactCallFragment(ContactCallFragment instance) {
      ContactCallFragment_MembersInjector.injectMPresenter(instance, contactCallMvpPresenterOfContactCallMvpView());
      ContactCallFragment_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private GroupListPresenter<GroupListMvpView> injectGroupListPresenter(
        GroupListPresenter<GroupListMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private GroupListFragment injectGroupListFragment(GroupListFragment instance) {
      GroupListFragment_MembersInjector.injectAdapter(instance, groupListAdapter());
      GroupListFragment_MembersInjector.injectMLayoutManager(instance, linearLayoutManager());
      GroupListFragment_MembersInjector.injectMPresenter(instance, groupListMvpPresenterOfGroupListMvpView());
      GroupListFragment_MembersInjector.injectSchedulerProvider(instance, ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule));
      GroupListFragment_MembersInjector.injectSpinnerAdapter(instance, groupListSpinnerAdapter());
      return instance;
    }

    @CanIgnoreReturnValue
    private GroupDetailPresenter<GroupDetailMvpView> injectGroupDetailPresenter(
        GroupDetailPresenter<GroupDetailMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private GroupDetailFragment injectGroupDetailFragment(GroupDetailFragment instance) {
      GroupDetailFragment_MembersInjector.injectMPresenter(instance, groupDetailMvpPresenterOfGroupDetailMvpView());
      return instance;
    }

    @CanIgnoreReturnValue
    private GenerateGroupPresenter<GenerateGroupMvpView> injectGenerateGroupPresenter(
        GenerateGroupPresenter<GenerateGroupMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private GenerateGroupFragment injectGenerateGroupFragment(GenerateGroupFragment instance) {
      GenerateGroupFragment_MembersInjector.injectMPresenter(instance, generateGroupMvpPresenterOfGenerateGroupMvpView());
      return instance;
    }

    @CanIgnoreReturnValue
    private AlertListPresenter<AlertListMvpView> injectAlertListPresenter(
        AlertListPresenter<AlertListMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private AlertListFragment injectAlertListFragment(AlertListFragment instance) {
      AlertListFragment_MembersInjector.injectAlertListAdapter(instance, alertListAdapter());
      AlertListFragment_MembersInjector.injectMLayoutManager(instance, linearLayoutManager());
      AlertListFragment_MembersInjector.injectMPresenter(instance, alertListMvpPresenterOfAlertListMvpView());
      return instance;
    }

    @CanIgnoreReturnValue
    private AlertDetailPresenter<AlertDetailMvpView> injectAlertDetailPresenter(
        AlertDetailPresenter<AlertDetailMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private AlertDetailFragment injectAlertDetailFragment(AlertDetailFragment instance) {
      AlertDetailFragment_MembersInjector.injectMPresenter(instance, alertDetailMvpPresenterOfAlertDetailMvpView());
      return instance;
    }

    @CanIgnoreReturnValue
    private SettingsPresenter<SettingsMvpView> injectSettingsPresenter(
        SettingsPresenter<SettingsMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private SettingsFragment injectSettingsFragment(SettingsFragment instance) {
      SettingsFragment_MembersInjector.injectMPresenter(instance, settingsMvpPresenterOfSettingsMvpView());
      return instance;
    }

    @CanIgnoreReturnValue
    private AccountSettingsPresenter<AccountSettingsMvpView> injectAccountSettingsPresenter(
        AccountSettingsPresenter<AccountSettingsMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private AccountSettingsFragment injectAccountSettingsFragment(
        AccountSettingsFragment instance) {
      AccountSettingsFragment_MembersInjector.injectMPresenter(instance, accountSettingsMvpPresenterOfAccountSettingsMvpView());
      return instance;
    }

    @CanIgnoreReturnValue
    private NotificationSettingsPresenter<NotificationSettingsMvpView> injectNotificationSettingsPresenter(
        NotificationSettingsPresenter<NotificationSettingsMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private NotificationSettingsFragment injectNotificationSettingsFragment(
        NotificationSettingsFragment instance) {
      NotificationSettingsFragment_MembersInjector.injectMPresenter(instance, notificationSettingsMvpPresenterOfNotificationSettingsMvpView());
      NotificationSettingsFragment_MembersInjector.injectMLayoutManager(instance, linearLayoutManager());
      NotificationSettingsFragment_MembersInjector.injectNotificationSettingAdapter(instance, notificationSettingAdapter());
      return instance;
    }

    @CanIgnoreReturnValue
    private HelpPresenter<HelpMvpView> injectHelpPresenter(HelpPresenter<HelpMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private HelpFragment injectHelpFragment(HelpFragment instance) {
      HelpFragment_MembersInjector.injectMPresenter(instance, helpMvpPresenterOfHelpMvpView());
      return instance;
    }

    @CanIgnoreReturnValue
    private ContactDeliverPresenter<ContactDeliverMvpView> injectContactDeliverPresenter(
        ContactDeliverPresenter<ContactDeliverMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private ContactDeliverDialog injectContactDeliverDialog(ContactDeliverDialog instance) {
      ContactDeliverDialog_MembersInjector.injectMPresenter(instance, contactDeliverMvpPresenterOfContactDeliverMvpView());
      ContactDeliverDialog_MembersInjector.injectContactDeliverListAdapter(instance, contactDeliverListAdapter());
      ContactDeliverDialog_MembersInjector.injectSchedulerProvider(instance, ActivityModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(activityModule));
      ContactDeliverDialog_MembersInjector.injectMLayoutManager(instance, linearLayoutManager());
      return instance;
    }

    @CanIgnoreReturnValue
    private MessageViewPresenter<MessageViewMvpView> injectMessageViewPresenter(
        MessageViewPresenter<MessageViewMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private MessageViewDialog injectMessageViewDialog(MessageViewDialog instance) {
      MessageViewDialog_MembersInjector.injectMPresenter(instance, messageViewMvpPresenterOfMessageViewMvpView());
      return instance;
    }

    @CanIgnoreReturnValue
    private FindLocationPresenter<FindLocationMvpView> injectFindLocationPresenter(
        FindLocationPresenter<FindLocationMvpView> instance) {
      BasePresenter_MembersInjector.injectRxPermissions(instance, ActivityModule_ProvideRxPermissionsFactory.provideRxPermissions(activityModule));
      BasePresenter_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private FindLocationDialog injectFindLocationDialog(FindLocationDialog instance) {
      FindLocationDialog_MembersInjector.injectMPresenter(instance, findLocationMvpPresenterOfFindLocationMvpView());
      FindLocationDialog_MembersInjector.injectFusedLocationProviderClient(instance, fusedLocationProviderClient());
      return instance;
    }

    @CanIgnoreReturnValue
    private LifeSafetyPopupActivity injectLifeSafetyPopupActivity(
        LifeSafetyPopupActivity instance) {
      BaseActivity_MembersInjector.injectAudioHelper(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioHelper()));
      BaseActivity_MembersInjector.injectAudioManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioManager()));
      BaseActivity_MembersInjector.injectDataManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()));
      BaseActivity_MembersInjector.injectFusedLocationProviderClient(instance, fusedLocationProviderClient());
      BaseActivity_MembersInjector.injectLocationUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getLocationUtil()));
      BaseActivity_MembersInjector.injectResponder(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getResponder()));
      BaseActivity_MembersInjector.injectVideoDownloader(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getVideoDownloader()));
      return instance;
    }

    @CanIgnoreReturnValue
    private PersonalSafetyPopupActivity injectPersonalSafetyPopupActivity(
        PersonalSafetyPopupActivity instance) {
      BaseActivity_MembersInjector.injectAudioHelper(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioHelper()));
      BaseActivity_MembersInjector.injectAudioManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioManager()));
      BaseActivity_MembersInjector.injectDataManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()));
      BaseActivity_MembersInjector.injectFusedLocationProviderClient(instance, fusedLocationProviderClient());
      BaseActivity_MembersInjector.injectLocationUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getLocationUtil()));
      BaseActivity_MembersInjector.injectResponder(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getResponder()));
      BaseActivity_MembersInjector.injectVideoDownloader(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getVideoDownloader()));
      return instance;
    }

    @CanIgnoreReturnValue
    private IncomingCallActivity injectIncomingCallActivity(IncomingCallActivity instance) {
      BaseActivity_MembersInjector.injectAudioHelper(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioHelper()));
      BaseActivity_MembersInjector.injectAudioManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioManager()));
      BaseActivity_MembersInjector.injectDataManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()));
      BaseActivity_MembersInjector.injectFusedLocationProviderClient(instance, fusedLocationProviderClient());
      BaseActivity_MembersInjector.injectLocationUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getLocationUtil()));
      BaseActivity_MembersInjector.injectResponder(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getResponder()));
      BaseActivity_MembersInjector.injectVideoDownloader(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getVideoDownloader()));
      IncomingCallActivity_MembersInjector.injectMPresenter(instance, provideIncomingCallPresenterProvider.get());
      IncomingCallActivity_MembersInjector.injectTwilioUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil()));
      IncomingCallActivity_MembersInjector.injectAudioHelper(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioHelper()));
      return instance;
    }

    private static final class GetDataManagerProvider implements Provider<DataManager> {
      private final ApplicationComponent applicationComponent;

      GetDataManagerProvider(ApplicationComponent applicationComponent) {
        this.applicationComponent = applicationComponent;
      }

      @Override
      public DataManager get() {
        return Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager());
      }
    }

    private static final class GetTwilioUtilProvider implements Provider<TwilioUtil> {
      private final ApplicationComponent applicationComponent;

      GetTwilioUtilProvider(ApplicationComponent applicationComponent) {
        this.applicationComponent = applicationComponent;
      }

      @Override
      public TwilioUtil get() {
        return Preconditions.checkNotNullFromComponent(applicationComponent.getTwilioUtil());
      }
    }
  }
}
