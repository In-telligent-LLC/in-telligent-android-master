// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.di.component;

import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.sca.in_telligent.di.module.ServiceModule;
import com.sca.in_telligent.di.module.ServiceModule_ProvideCompositeDisposableFactory;
import com.sca.in_telligent.di.module.ServiceModule_ProvideSchedulerProviderFactory;
import com.sca.in_telligent.service.GeofenceTransitionsIntentService;
import com.sca.in_telligent.service.GeofenceTransitionsIntentService_MembersInjector;
import com.sca.in_telligent.service.GeofencesUpdateWorker;
import com.sca.in_telligent.service.GeofencesUpdateWorker_MembersInjector;
import com.sca.in_telligent.service.HeadsUpNotificationService;
import com.sca.in_telligent.service.MyFirebaseMessagingService;
import com.sca.in_telligent.service.MyFirebaseMessagingService_MembersInjector;
import com.sca.in_telligent.ui.notificationdetail.VoiceCallNotificationActivity;
import com.sca.in_telligent.ui.notificationdetail.VoiceCallNotificationActivity_MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerServiceComponent {
  private DaggerServiceComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ServiceModule serviceModule;

    private ApplicationComponent applicationComponent;

    private Builder() {
    }

    public Builder serviceModule(ServiceModule serviceModule) {
      this.serviceModule = Preconditions.checkNotNull(serviceModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }

    public ServiceComponent build() {
      Preconditions.checkBuilderRequirement(serviceModule, ServiceModule.class);
      Preconditions.checkBuilderRequirement(applicationComponent, ApplicationComponent.class);
      return new ServiceComponentImpl(serviceModule, applicationComponent);
    }
  }

  private static final class ServiceComponentImpl implements ServiceComponent {
    private final ApplicationComponent applicationComponent;

    private final ServiceModule serviceModule;

    private final ServiceComponentImpl serviceComponentImpl = this;

    private ServiceComponentImpl(ServiceModule serviceModuleParam,
        ApplicationComponent applicationComponentParam) {
      this.applicationComponent = applicationComponentParam;
      this.serviceModule = serviceModuleParam;

    }

    @Override
    public void inject(HeadsUpNotificationService headsUpNotificationService) {
    }

    @Override
    public void inject(MyFirebaseMessagingService service) {
      injectMyFirebaseMessagingService(service);
    }

    @Override
    public void inject(GeofenceTransitionsIntentService service) {
      injectGeofenceTransitionsIntentService(service);
    }

    @Override
    public void inject(GeofencesUpdateWorker service) {
      injectGeofencesUpdateWorker(service);
    }

    @Override
    public void inject(VoiceCallNotificationActivity voiceCallNotificationActivity) {
      injectVoiceCallNotificationActivity(voiceCallNotificationActivity);
    }

    @CanIgnoreReturnValue
    private MyFirebaseMessagingService injectMyFirebaseMessagingService(
        MyFirebaseMessagingService instance) {
      MyFirebaseMessagingService_MembersInjector.injectDataManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()));
      MyFirebaseMessagingService_MembersInjector.injectAudioHelper(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioHelper()));
      MyFirebaseMessagingService_MembersInjector.injectWeatherUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getWeatherUtil()));
      MyFirebaseMessagingService_MembersInjector.injectResponder(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getResponder()));
      MyFirebaseMessagingService_MembersInjector.injectLocationUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getLocationUtil()));
      MyFirebaseMessagingService_MembersInjector.injectGeofenceClient(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getGeofenceClient()));
      return instance;
    }

    @CanIgnoreReturnValue
    private GeofenceTransitionsIntentService injectGeofenceTransitionsIntentService(
        GeofenceTransitionsIntentService instance) {
      GeofenceTransitionsIntentService_MembersInjector.injectMLocationUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getLocationUtil()));
      GeofenceTransitionsIntentService_MembersInjector.injectMDataManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()));
      GeofenceTransitionsIntentService_MembersInjector.injectMSchedulerProvider(instance, ServiceModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(serviceModule));
      GeofenceTransitionsIntentService_MembersInjector.injectMCompositeDisposable(instance, ServiceModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(serviceModule));
      GeofenceTransitionsIntentService_MembersInjector.injectMGeofenceClient(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getGeofenceClient()));
      GeofenceTransitionsIntentService_MembersInjector.injectMWeatherUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getWeatherUtil()));
      return instance;
    }

    @CanIgnoreReturnValue
    private GeofencesUpdateWorker injectGeofencesUpdateWorker(GeofencesUpdateWorker instance) {
      GeofencesUpdateWorker_MembersInjector.injectDataManager(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getDataManager()));
      GeofencesUpdateWorker_MembersInjector.injectLocationUtil(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getLocationUtil()));
      GeofencesUpdateWorker_MembersInjector.injectSchedulerProvider(instance, ServiceModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(serviceModule));
      GeofencesUpdateWorker_MembersInjector.injectCompositeDisposable(instance, ServiceModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(serviceModule));
      return instance;
    }

    @CanIgnoreReturnValue
    private VoiceCallNotificationActivity injectVoiceCallNotificationActivity(
        VoiceCallNotificationActivity instance) {
      VoiceCallNotificationActivity_MembersInjector.injectAudioHelper(instance, Preconditions.checkNotNullFromComponent(applicationComponent.getAudioHelper()));
      return instance;
    }
  }
}
