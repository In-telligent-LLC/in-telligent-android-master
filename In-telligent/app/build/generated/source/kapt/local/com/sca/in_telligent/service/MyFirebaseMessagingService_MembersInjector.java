// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.service;

import com.sca.in_telligent.data.DataManager;
import com.sca.in_telligent.openapi.util.AudioHelper;
import com.sca.in_telligent.util.LocationUtil;
import com.sca.in_telligent.util.Responder;
import com.sca.in_telligent.util.WeatherUtil;
import com.sca.in_telligent.util.geofence.GeofenceClient;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class MyFirebaseMessagingService_MembersInjector implements MembersInjector<MyFirebaseMessagingService> {
  private final Provider<DataManager> dataManagerProvider;

  private final Provider<AudioHelper> audioHelperProvider;

  private final Provider<WeatherUtil> weatherUtilProvider;

  private final Provider<Responder> responderProvider;

  private final Provider<LocationUtil> locationUtilProvider;

  private final Provider<GeofenceClient> geofenceClientProvider;

  public MyFirebaseMessagingService_MembersInjector(Provider<DataManager> dataManagerProvider,
      Provider<AudioHelper> audioHelperProvider, Provider<WeatherUtil> weatherUtilProvider,
      Provider<Responder> responderProvider, Provider<LocationUtil> locationUtilProvider,
      Provider<GeofenceClient> geofenceClientProvider) {
    this.dataManagerProvider = dataManagerProvider;
    this.audioHelperProvider = audioHelperProvider;
    this.weatherUtilProvider = weatherUtilProvider;
    this.responderProvider = responderProvider;
    this.locationUtilProvider = locationUtilProvider;
    this.geofenceClientProvider = geofenceClientProvider;
  }

  public static MembersInjector<MyFirebaseMessagingService> create(
      Provider<DataManager> dataManagerProvider, Provider<AudioHelper> audioHelperProvider,
      Provider<WeatherUtil> weatherUtilProvider, Provider<Responder> responderProvider,
      Provider<LocationUtil> locationUtilProvider,
      Provider<GeofenceClient> geofenceClientProvider) {
    return new MyFirebaseMessagingService_MembersInjector(dataManagerProvider, audioHelperProvider, weatherUtilProvider, responderProvider, locationUtilProvider, geofenceClientProvider);
  }

  @Override
  public void injectMembers(MyFirebaseMessagingService instance) {
    injectDataManager(instance, dataManagerProvider.get());
    injectAudioHelper(instance, audioHelperProvider.get());
    injectWeatherUtil(instance, weatherUtilProvider.get());
    injectResponder(instance, responderProvider.get());
    injectLocationUtil(instance, locationUtilProvider.get());
    injectGeofenceClient(instance, geofenceClientProvider.get());
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.MyFirebaseMessagingService.dataManager")
  public static void injectDataManager(MyFirebaseMessagingService instance,
      DataManager dataManager) {
    instance.dataManager = dataManager;
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.MyFirebaseMessagingService.audioHelper")
  public static void injectAudioHelper(MyFirebaseMessagingService instance,
      AudioHelper audioHelper) {
    instance.audioHelper = audioHelper;
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.MyFirebaseMessagingService.weatherUtil")
  public static void injectWeatherUtil(MyFirebaseMessagingService instance,
      WeatherUtil weatherUtil) {
    instance.weatherUtil = weatherUtil;
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.MyFirebaseMessagingService.responder")
  public static void injectResponder(MyFirebaseMessagingService instance, Responder responder) {
    instance.responder = responder;
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.MyFirebaseMessagingService.locationUtil")
  public static void injectLocationUtil(MyFirebaseMessagingService instance,
      LocationUtil locationUtil) {
    instance.locationUtil = locationUtil;
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.MyFirebaseMessagingService.geofenceClient")
  public static void injectGeofenceClient(MyFirebaseMessagingService instance,
      GeofenceClient geofenceClient) {
    instance.geofenceClient = geofenceClient;
  }
}
