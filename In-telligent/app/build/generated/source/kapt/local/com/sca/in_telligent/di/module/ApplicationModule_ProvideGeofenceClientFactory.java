// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.di.module;

import com.sca.in_telligent.util.geofence.AppGeofenceClient;
import com.sca.in_telligent.util.geofence.GeofenceClient;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ApplicationModule_ProvideGeofenceClientFactory implements Factory<GeofenceClient> {
  private final ApplicationModule module;

  private final Provider<AppGeofenceClient> appGeofenceClientProvider;

  public ApplicationModule_ProvideGeofenceClientFactory(ApplicationModule module,
      Provider<AppGeofenceClient> appGeofenceClientProvider) {
    this.module = module;
    this.appGeofenceClientProvider = appGeofenceClientProvider;
  }

  @Override
  public GeofenceClient get() {
    return provideGeofenceClient(module, appGeofenceClientProvider.get());
  }

  public static ApplicationModule_ProvideGeofenceClientFactory create(ApplicationModule module,
      Provider<AppGeofenceClient> appGeofenceClientProvider) {
    return new ApplicationModule_ProvideGeofenceClientFactory(module, appGeofenceClientProvider);
  }

  public static GeofenceClient provideGeofenceClient(ApplicationModule instance,
      AppGeofenceClient appGeofenceClient) {
    return Preconditions.checkNotNullFromProvides(instance.provideGeofenceClient(appGeofenceClient));
  }
}
