// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.di.module;

import com.sca.in_telligent.ui.splash.SplashMvpPresenter;
import com.sca.in_telligent.ui.splash.SplashMvpView;
import com.sca.in_telligent.ui.splash.SplashPresenter;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("com.sca.in_telligent.di.PerActivity")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ActivityModule_ProvideSplashPresenterFactory implements Factory<SplashMvpPresenter<SplashMvpView>> {
  private final ActivityModule module;

  private final Provider<SplashPresenter<SplashMvpView>> presenterProvider;

  public ActivityModule_ProvideSplashPresenterFactory(ActivityModule module,
      Provider<SplashPresenter<SplashMvpView>> presenterProvider) {
    this.module = module;
    this.presenterProvider = presenterProvider;
  }

  @Override
  public SplashMvpPresenter<SplashMvpView> get() {
    return provideSplashPresenter(module, presenterProvider.get());
  }

  public static ActivityModule_ProvideSplashPresenterFactory create(ActivityModule module,
      Provider<SplashPresenter<SplashMvpView>> presenterProvider) {
    return new ActivityModule_ProvideSplashPresenterFactory(module, presenterProvider);
  }

  public static SplashMvpPresenter<SplashMvpView> provideSplashPresenter(ActivityModule instance,
      SplashPresenter<SplashMvpView> presenter) {
    return Preconditions.checkNotNullFromProvides(instance.provideSplashPresenter(presenter));
  }
}
