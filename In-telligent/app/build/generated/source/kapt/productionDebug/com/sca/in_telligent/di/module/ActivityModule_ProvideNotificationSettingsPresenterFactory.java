// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.di.module;

import com.sca.in_telligent.ui.settings.notification.NotificationSettingsMvpPresenter;
import com.sca.in_telligent.ui.settings.notification.NotificationSettingsMvpView;
import com.sca.in_telligent.ui.settings.notification.NotificationSettingsPresenter;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ActivityModule_ProvideNotificationSettingsPresenterFactory implements Factory<NotificationSettingsMvpPresenter<NotificationSettingsMvpView>> {
  private final ActivityModule module;

  private final Provider<NotificationSettingsPresenter<NotificationSettingsMvpView>> presenterProvider;

  public ActivityModule_ProvideNotificationSettingsPresenterFactory(ActivityModule module,
      Provider<NotificationSettingsPresenter<NotificationSettingsMvpView>> presenterProvider) {
    this.module = module;
    this.presenterProvider = presenterProvider;
  }

  @Override
  public NotificationSettingsMvpPresenter<NotificationSettingsMvpView> get() {
    return provideNotificationSettingsPresenter(module, presenterProvider.get());
  }

  public static ActivityModule_ProvideNotificationSettingsPresenterFactory create(
      ActivityModule module,
      Provider<NotificationSettingsPresenter<NotificationSettingsMvpView>> presenterProvider) {
    return new ActivityModule_ProvideNotificationSettingsPresenterFactory(module, presenterProvider);
  }

  public static NotificationSettingsMvpPresenter<NotificationSettingsMvpView> provideNotificationSettingsPresenter(
      ActivityModule instance,
      NotificationSettingsPresenter<NotificationSettingsMvpView> presenter) {
    return Preconditions.checkNotNullFromProvides(instance.provideNotificationSettingsPresenter(presenter));
  }
}
