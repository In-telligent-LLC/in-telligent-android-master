// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.di.module;

import com.sca.in_telligent.ui.auth.logout.LogoutMvpPresenter;
import com.sca.in_telligent.ui.auth.logout.LogoutMvpView;
import com.sca.in_telligent.ui.auth.logout.LogoutPresenter;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("com.sca.in_telligent.di.PerActivity")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ActivityModule_ProvideLogoutPresenterFactory implements Factory<LogoutMvpPresenter<LogoutMvpView>> {
  private final ActivityModule module;

  private final Provider<LogoutPresenter<LogoutMvpView>> presenterProvider;

  public ActivityModule_ProvideLogoutPresenterFactory(ActivityModule module,
      Provider<LogoutPresenter<LogoutMvpView>> presenterProvider) {
    this.module = module;
    this.presenterProvider = presenterProvider;
  }

  @Override
  public LogoutMvpPresenter<LogoutMvpView> get() {
    return provideLogoutPresenter(module, presenterProvider.get());
  }

  public static ActivityModule_ProvideLogoutPresenterFactory create(ActivityModule module,
      Provider<LogoutPresenter<LogoutMvpView>> presenterProvider) {
    return new ActivityModule_ProvideLogoutPresenterFactory(module, presenterProvider);
  }

  public static LogoutMvpPresenter<LogoutMvpView> provideLogoutPresenter(ActivityModule instance,
      LogoutPresenter<LogoutMvpView> presenter) {
    return Preconditions.checkNotNullFromProvides(instance.provideLogoutPresenter(presenter));
  }
}
