// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.ui.auth.register;

import com.sca.in_telligent.data.DataManager;
import com.sca.in_telligent.ui.base.BasePresenter_MembersInjector;
import com.sca.in_telligent.util.rx.SchedulerProvider;
import com.sca.in_telligent.util.twilio.TwilioUtil;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import io.reactivex.rxjava3.disposables.CompositeDisposable;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class SignupPasswordPresenter_Factory<V extends SignupPasswordMvpView> implements Factory<SignupPasswordPresenter<V>> {
  private final Provider<DataManager> dataManagerProvider;

  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  private final Provider<TwilioUtil> twilioUtilProvider;

  public SignupPasswordPresenter_Factory(Provider<DataManager> dataManagerProvider,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<TwilioUtil> twilioUtilProvider) {
    this.dataManagerProvider = dataManagerProvider;
    this.schedulerProvider = schedulerProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
    this.twilioUtilProvider = twilioUtilProvider;
  }

  @Override
  public SignupPasswordPresenter<V> get() {
    SignupPasswordPresenter<V> instance = newInstance(dataManagerProvider.get(), schedulerProvider.get(), compositeDisposableProvider.get());
    BasePresenter_MembersInjector.injectTwilioUtil(instance, twilioUtilProvider.get());
    return instance;
  }

  public static <V extends SignupPasswordMvpView> SignupPasswordPresenter_Factory<V> create(
      Provider<DataManager> dataManagerProvider, Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider,
      Provider<TwilioUtil> twilioUtilProvider) {
    return new SignupPasswordPresenter_Factory<V>(dataManagerProvider, schedulerProvider, compositeDisposableProvider, twilioUtilProvider);
  }

  public static <V extends SignupPasswordMvpView> SignupPasswordPresenter<V> newInstance(
      DataManager dataManager, SchedulerProvider schedulerProvider,
      CompositeDisposable compositeDisposable) {
    return new SignupPasswordPresenter<V>(dataManager, schedulerProvider, compositeDisposable);
  }
}
