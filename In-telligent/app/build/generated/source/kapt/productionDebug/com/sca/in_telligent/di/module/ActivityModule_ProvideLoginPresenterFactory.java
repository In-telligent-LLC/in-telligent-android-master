// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.di.module;

import com.sca.in_telligent.ui.auth.login.LoginMvpPresenter;
import com.sca.in_telligent.ui.auth.login.LoginMvpView;
import com.sca.in_telligent.ui.auth.login.LoginPresenter;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("com.sca.in_telligent.di.PerActivity")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ActivityModule_ProvideLoginPresenterFactory implements Factory<LoginMvpPresenter<LoginMvpView>> {
  private final ActivityModule module;

  private final Provider<LoginPresenter<LoginMvpView>> presenterProvider;

  public ActivityModule_ProvideLoginPresenterFactory(ActivityModule module,
      Provider<LoginPresenter<LoginMvpView>> presenterProvider) {
    this.module = module;
    this.presenterProvider = presenterProvider;
  }

  @Override
  public LoginMvpPresenter<LoginMvpView> get() {
    return provideLoginPresenter(module, presenterProvider.get());
  }

  public static ActivityModule_ProvideLoginPresenterFactory create(ActivityModule module,
      Provider<LoginPresenter<LoginMvpView>> presenterProvider) {
    return new ActivityModule_ProvideLoginPresenterFactory(module, presenterProvider);
  }

  public static LoginMvpPresenter<LoginMvpView> provideLoginPresenter(ActivityModule instance,
      LoginPresenter<LoginMvpView> presenter) {
    return Preconditions.checkNotNullFromProvides(instance.provideLoginPresenter(presenter));
  }
}
