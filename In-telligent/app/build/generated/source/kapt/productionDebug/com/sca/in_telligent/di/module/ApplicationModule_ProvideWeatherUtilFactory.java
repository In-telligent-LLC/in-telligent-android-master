// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.di.module;

import com.sca.in_telligent.util.AppWeatherUtil;
import com.sca.in_telligent.util.WeatherUtil;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ApplicationModule_ProvideWeatherUtilFactory implements Factory<WeatherUtil> {
  private final ApplicationModule module;

  private final Provider<AppWeatherUtil> appWeatherUtilProvider;

  public ApplicationModule_ProvideWeatherUtilFactory(ApplicationModule module,
      Provider<AppWeatherUtil> appWeatherUtilProvider) {
    this.module = module;
    this.appWeatherUtilProvider = appWeatherUtilProvider;
  }

  @Override
  public WeatherUtil get() {
    return provideWeatherUtil(module, appWeatherUtilProvider.get());
  }

  public static ApplicationModule_ProvideWeatherUtilFactory create(ApplicationModule module,
      Provider<AppWeatherUtil> appWeatherUtilProvider) {
    return new ApplicationModule_ProvideWeatherUtilFactory(module, appWeatherUtilProvider);
  }

  public static WeatherUtil provideWeatherUtil(ApplicationModule instance,
      AppWeatherUtil appWeatherUtil) {
    return Preconditions.checkNotNullFromProvides(instance.provideWeatherUtil(appWeatherUtil));
  }
}
