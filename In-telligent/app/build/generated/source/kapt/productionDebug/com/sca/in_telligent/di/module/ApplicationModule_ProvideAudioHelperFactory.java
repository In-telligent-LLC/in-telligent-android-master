// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.di.module;

import android.content.Context;
import android.media.AudioManager;
import android.os.Vibrator;
import com.sca.in_telligent.openapi.util.AudioHelper;
import com.sca.in_telligent.openapi.util.FlashHelper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("com.sca.in_telligent.di.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ApplicationModule_ProvideAudioHelperFactory implements Factory<AudioHelper> {
  private final ApplicationModule module;

  private final Provider<Context> contextProvider;

  private final Provider<AudioManager> audioManagerProvider;

  private final Provider<Vibrator> vibratorProvider;

  private final Provider<FlashHelper> flashHelperProvider;

  public ApplicationModule_ProvideAudioHelperFactory(ApplicationModule module,
      Provider<Context> contextProvider, Provider<AudioManager> audioManagerProvider,
      Provider<Vibrator> vibratorProvider, Provider<FlashHelper> flashHelperProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.audioManagerProvider = audioManagerProvider;
    this.vibratorProvider = vibratorProvider;
    this.flashHelperProvider = flashHelperProvider;
  }

  @Override
  public AudioHelper get() {
    return provideAudioHelper(module, contextProvider.get(), audioManagerProvider.get(), vibratorProvider.get(), flashHelperProvider.get());
  }

  public static ApplicationModule_ProvideAudioHelperFactory create(ApplicationModule module,
      Provider<Context> contextProvider, Provider<AudioManager> audioManagerProvider,
      Provider<Vibrator> vibratorProvider, Provider<FlashHelper> flashHelperProvider) {
    return new ApplicationModule_ProvideAudioHelperFactory(module, contextProvider, audioManagerProvider, vibratorProvider, flashHelperProvider);
  }

  public static AudioHelper provideAudioHelper(ApplicationModule instance, Context context,
      AudioManager audioManager, Vibrator vibrator, FlashHelper flashHelper) {
    return Preconditions.checkNotNullFromProvides(instance.provideAudioHelper(context, audioManager, vibrator, flashHelper));
  }
}
