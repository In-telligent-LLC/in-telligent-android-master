// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.di.component;

import android.app.Application;
import android.content.Context;
import android.media.AudioManager;
import android.os.Vibrator;
import androidx.work.WorkManager;
import com.google.android.gms.location.GeofencingClient;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.sca.in_telligent.ScaApplication;
import com.sca.in_telligent.ScaApplication_MembersInjector;
import com.sca.in_telligent.data.AppDataManager;
import com.sca.in_telligent.data.AppDataManager_Factory;
import com.sca.in_telligent.data.DataManager;
import com.sca.in_telligent.data.prefs.AppPreferencesHelper;
import com.sca.in_telligent.data.prefs.AppPreferencesHelper_Factory;
import com.sca.in_telligent.data.prefs.PreferencesHelper;
import com.sca.in_telligent.di.module.ApplicationModule;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideApiHelperFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideApplicationFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideAudioHelperFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideAudioManagerFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideCompositeDisposableFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideContextFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideDataManagerFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideFlashHelperFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideGeofenceClientFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideGeofencingClientFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideLifecycleObserverFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideLocationUtilFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvidePreferenceNameFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvidePreferencesHelperFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideResponderFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideSchedulerProviderFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideTwilioUtilFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideVibratorFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideVideoDownloaderFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideWeatherUtilFactory;
import com.sca.in_telligent.di.module.ApplicationModule_ProvideWorkManagerFactory;
import com.sca.in_telligent.openapi.data.network.ApiHelper;
import com.sca.in_telligent.openapi.util.AudioHelper;
import com.sca.in_telligent.openapi.util.FlashHelper;
import com.sca.in_telligent.service.GeofenceTransitionsIntentService;
import com.sca.in_telligent.service.GeofenceTransitionsIntentService_MembersInjector;
import com.sca.in_telligent.util.AppLifecycleObserver;
import com.sca.in_telligent.util.AppLifecycleObserver_Factory;
import com.sca.in_telligent.util.AppLocationUtil;
import com.sca.in_telligent.util.AppLocationUtil_Factory;
import com.sca.in_telligent.util.AppResponder;
import com.sca.in_telligent.util.AppResponder_Factory;
import com.sca.in_telligent.util.AppVideoDownloader;
import com.sca.in_telligent.util.AppVideoDownloader_Factory;
import com.sca.in_telligent.util.AppWeatherUtil;
import com.sca.in_telligent.util.AppWeatherUtil_Factory;
import com.sca.in_telligent.util.LifecycleInterface;
import com.sca.in_telligent.util.LocationUtil;
import com.sca.in_telligent.util.Responder;
import com.sca.in_telligent.util.VideoDownloader;
import com.sca.in_telligent.util.WeatherUtil;
import com.sca.in_telligent.util.geofence.AppGeofenceClient;
import com.sca.in_telligent.util.geofence.AppGeofenceClient_Factory;
import com.sca.in_telligent.util.geofence.GeofenceClient;
import com.sca.in_telligent.util.rx.SchedulerProvider;
import com.sca.in_telligent.util.twilio.AppTwilioUtil;
import com.sca.in_telligent.util.twilio.AppTwilioUtil_Factory;
import com.sca.in_telligent.util.twilio.TwilioUtil;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import io.reactivex.rxjava3.disposables.CompositeDisposable;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class DaggerApplicationComponent {
  private DaggerApplicationComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationModule applicationModule;

    private Builder() {
    }

    public Builder applicationModule(ApplicationModule applicationModule) {
      this.applicationModule = Preconditions.checkNotNull(applicationModule);
      return this;
    }

    public ApplicationComponent build() {
      Preconditions.checkBuilderRequirement(applicationModule, ApplicationModule.class);
      return new ApplicationComponentImpl(applicationModule);
    }
  }

  private static final class ApplicationComponentImpl implements ApplicationComponent {
    private final ApplicationModule applicationModule;

    private final ApplicationComponentImpl applicationComponentImpl = this;

    private Provider<Context> provideContextProvider;

    private Provider<String> providePreferenceNameProvider;

    private Provider<AppPreferencesHelper> appPreferencesHelperProvider;

    private Provider<PreferencesHelper> providePreferencesHelperProvider;

    private Provider<ApiHelper> provideApiHelperProvider;

    private Provider<AppDataManager> appDataManagerProvider;

    private Provider<DataManager> provideDataManagerProvider;

    private Provider<SchedulerProvider> provideSchedulerProvider;

    private Provider<CompositeDisposable> provideCompositeDisposableProvider;

    private Provider<AppLifecycleObserver> appLifecycleObserverProvider;

    private Provider<LifecycleInterface> provideLifecycleObserverProvider;

    private Provider<AudioManager> provideAudioManagerProvider;

    private Provider<AppLocationUtil> appLocationUtilProvider;

    private Provider<LocationUtil> provideLocationUtilProvider;

    private Provider<GeofencingClient> provideGeofencingClientProvider;

    private Provider<AppGeofenceClient> appGeofenceClientProvider;

    private Provider<GeofenceClient> provideGeofenceClientProvider;

    private Provider<AppWeatherUtil> appWeatherUtilProvider;

    private Provider<WeatherUtil> provideWeatherUtilProvider;

    private Provider<Vibrator> provideVibratorProvider;

    private Provider<FlashHelper> provideFlashHelperProvider;

    private Provider<AudioHelper> provideAudioHelperProvider;

    private Provider<AppResponder> appResponderProvider;

    private Provider<Responder> provideResponderProvider;

    private Provider<AppTwilioUtil> appTwilioUtilProvider;

    private Provider<TwilioUtil> provideTwilioUtilProvider;

    private Provider<AppVideoDownloader> appVideoDownloaderProvider;

    private Provider<VideoDownloader> provideVideoDownloaderProvider;

    private Provider<WorkManager> provideWorkManagerProvider;

    private ApplicationComponentImpl(ApplicationModule applicationModuleParam) {
      this.applicationModule = applicationModuleParam;
      initialize(applicationModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationModule applicationModuleParam) {
      this.provideContextProvider = ApplicationModule_ProvideContextFactory.create(applicationModuleParam);
      this.providePreferenceNameProvider = ApplicationModule_ProvidePreferenceNameFactory.create(applicationModuleParam);
      this.appPreferencesHelperProvider = DoubleCheck.provider(AppPreferencesHelper_Factory.create(provideContextProvider, providePreferenceNameProvider));
      this.providePreferencesHelperProvider = DoubleCheck.provider(ApplicationModule_ProvidePreferencesHelperFactory.create(applicationModuleParam, appPreferencesHelperProvider));
      this.provideApiHelperProvider = DoubleCheck.provider(ApplicationModule_ProvideApiHelperFactory.create(applicationModuleParam));
      this.appDataManagerProvider = DoubleCheck.provider(AppDataManager_Factory.create(provideContextProvider, providePreferencesHelperProvider, provideApiHelperProvider));
      this.provideDataManagerProvider = DoubleCheck.provider(ApplicationModule_ProvideDataManagerFactory.create(applicationModuleParam, appDataManagerProvider));
      this.provideSchedulerProvider = ApplicationModule_ProvideSchedulerProviderFactory.create(applicationModuleParam);
      this.provideCompositeDisposableProvider = ApplicationModule_ProvideCompositeDisposableFactory.create(applicationModuleParam);
      this.appLifecycleObserverProvider = AppLifecycleObserver_Factory.create(provideDataManagerProvider, provideSchedulerProvider, provideCompositeDisposableProvider);
      this.provideLifecycleObserverProvider = DoubleCheck.provider(ApplicationModule_ProvideLifecycleObserverFactory.create(applicationModuleParam, appLifecycleObserverProvider));
      this.provideAudioManagerProvider = DoubleCheck.provider(ApplicationModule_ProvideAudioManagerFactory.create(applicationModuleParam, provideContextProvider));
      this.appLocationUtilProvider = DoubleCheck.provider(AppLocationUtil_Factory.create(provideContextProvider));
      this.provideLocationUtilProvider = DoubleCheck.provider(ApplicationModule_ProvideLocationUtilFactory.create(applicationModuleParam, appLocationUtilProvider));
      this.provideGeofencingClientProvider = DoubleCheck.provider(ApplicationModule_ProvideGeofencingClientFactory.create(applicationModuleParam, provideContextProvider));
      this.appGeofenceClientProvider = DoubleCheck.provider(AppGeofenceClient_Factory.create(provideGeofencingClientProvider, provideLocationUtilProvider, provideDataManagerProvider, provideSchedulerProvider, provideCompositeDisposableProvider, provideContextProvider));
      this.provideGeofenceClientProvider = DoubleCheck.provider(ApplicationModule_ProvideGeofenceClientFactory.create(applicationModuleParam, appGeofenceClientProvider));
      this.appWeatherUtilProvider = DoubleCheck.provider(AppWeatherUtil_Factory.create(provideContextProvider, provideLocationUtilProvider, provideDataManagerProvider));
      this.provideWeatherUtilProvider = DoubleCheck.provider(ApplicationModule_ProvideWeatherUtilFactory.create(applicationModuleParam, appWeatherUtilProvider));
      this.provideVibratorProvider = DoubleCheck.provider(ApplicationModule_ProvideVibratorFactory.create(applicationModuleParam, provideContextProvider));
      this.provideFlashHelperProvider = DoubleCheck.provider(ApplicationModule_ProvideFlashHelperFactory.create(applicationModuleParam, provideContextProvider));
      this.provideAudioHelperProvider = DoubleCheck.provider(ApplicationModule_ProvideAudioHelperFactory.create(applicationModuleParam, provideContextProvider, provideAudioManagerProvider, provideVibratorProvider, provideFlashHelperProvider));
      this.appResponderProvider = DoubleCheck.provider(AppResponder_Factory.create(provideDataManagerProvider));
      this.provideResponderProvider = DoubleCheck.provider(ApplicationModule_ProvideResponderFactory.create(applicationModuleParam, appResponderProvider));
      this.appTwilioUtilProvider = DoubleCheck.provider(AppTwilioUtil_Factory.create(provideContextProvider, provideDataManagerProvider, provideSchedulerProvider, provideCompositeDisposableProvider, provideResponderProvider, providePreferencesHelperProvider));
      this.provideTwilioUtilProvider = DoubleCheck.provider(ApplicationModule_ProvideTwilioUtilFactory.create(applicationModuleParam, appTwilioUtilProvider));
      this.appVideoDownloaderProvider = DoubleCheck.provider(AppVideoDownloader_Factory.create(provideContextProvider));
      this.provideVideoDownloaderProvider = DoubleCheck.provider(ApplicationModule_ProvideVideoDownloaderFactory.create(applicationModuleParam, appVideoDownloaderProvider));
      this.provideWorkManagerProvider = DoubleCheck.provider(ApplicationModule_ProvideWorkManagerFactory.create(applicationModuleParam));
    }

    @Override
    public void inject(ScaApplication app) {
      injectScaApplication(app);
    }

    @Override
    public void inject(GeofenceTransitionsIntentService service) {
      injectGeofenceTransitionsIntentService(service);
    }

    @Override
    public Context context() {
      return ApplicationModule_ProvideContextFactory.provideContext(applicationModule);
    }

    @Override
    public Application application() {
      return ApplicationModule_ProvideApplicationFactory.provideApplication(applicationModule);
    }

    @Override
    public DataManager getDataManager() {
      return provideDataManagerProvider.get();
    }

    @Override
    public AudioManager getAudioManager() {
      return provideAudioManagerProvider.get();
    }

    @Override
    public AudioHelper getAudioHelper() {
      return provideAudioHelperProvider.get();
    }

    @Override
    public WeatherUtil getWeatherUtil() {
      return provideWeatherUtilProvider.get();
    }

    @Override
    public LocationUtil getLocationUtil() {
      return provideLocationUtilProvider.get();
    }

    @Override
    public Responder getResponder() {
      return provideResponderProvider.get();
    }

    @Override
    public GeofenceClient getGeofenceClient() {
      return provideGeofenceClientProvider.get();
    }

    @Override
    public TwilioUtil getTwilioUtil() {
      return provideTwilioUtilProvider.get();
    }

    @Override
    public LifecycleInterface getLifecycleInterface() {
      return provideLifecycleObserverProvider.get();
    }

    @Override
    public VideoDownloader getVideoDownloader() {
      return provideVideoDownloaderProvider.get();
    }

    @Override
    public WorkManager getWorkManager() {
      return provideWorkManagerProvider.get();
    }

    @CanIgnoreReturnValue
    private ScaApplication injectScaApplication(ScaApplication instance) {
      ScaApplication_MembersInjector.injectMDataManager(instance, provideDataManagerProvider.get());
      ScaApplication_MembersInjector.injectAppLifecycleObserver(instance, provideLifecycleObserverProvider.get());
      ScaApplication_MembersInjector.injectAudioManager(instance, provideAudioManagerProvider.get());
      return instance;
    }

    @CanIgnoreReturnValue
    private GeofenceTransitionsIntentService injectGeofenceTransitionsIntentService(
        GeofenceTransitionsIntentService instance) {
      GeofenceTransitionsIntentService_MembersInjector.injectMLocationUtil(instance, provideLocationUtilProvider.get());
      GeofenceTransitionsIntentService_MembersInjector.injectMDataManager(instance, provideDataManagerProvider.get());
      GeofenceTransitionsIntentService_MembersInjector.injectMSchedulerProvider(instance, ApplicationModule_ProvideSchedulerProviderFactory.provideSchedulerProvider(applicationModule));
      GeofenceTransitionsIntentService_MembersInjector.injectMCompositeDisposable(instance, ApplicationModule_ProvideCompositeDisposableFactory.provideCompositeDisposable(applicationModule));
      GeofenceTransitionsIntentService_MembersInjector.injectMGeofenceClient(instance, provideGeofenceClientProvider.get());
      GeofenceTransitionsIntentService_MembersInjector.injectMWeatherUtil(instance, provideWeatherUtilProvider.get());
      return instance;
    }
  }
}
