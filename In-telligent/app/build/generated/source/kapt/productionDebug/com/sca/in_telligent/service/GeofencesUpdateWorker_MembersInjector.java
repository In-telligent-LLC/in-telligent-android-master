// Generated by Dagger (https://dagger.dev).
package com.sca.in_telligent.service;

import com.sca.in_telligent.data.DataManager;
import com.sca.in_telligent.util.LocationUtil;
import com.sca.in_telligent.util.rx.SchedulerProvider;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import io.reactivex.rxjava3.disposables.CompositeDisposable;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class GeofencesUpdateWorker_MembersInjector implements MembersInjector<GeofencesUpdateWorker> {
  private final Provider<DataManager> dataManagerProvider;

  private final Provider<LocationUtil> locationUtilProvider;

  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<CompositeDisposable> compositeDisposableProvider;

  public GeofencesUpdateWorker_MembersInjector(Provider<DataManager> dataManagerProvider,
      Provider<LocationUtil> locationUtilProvider, Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    this.dataManagerProvider = dataManagerProvider;
    this.locationUtilProvider = locationUtilProvider;
    this.schedulerProvider = schedulerProvider;
    this.compositeDisposableProvider = compositeDisposableProvider;
  }

  public static MembersInjector<GeofencesUpdateWorker> create(
      Provider<DataManager> dataManagerProvider, Provider<LocationUtil> locationUtilProvider,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<CompositeDisposable> compositeDisposableProvider) {
    return new GeofencesUpdateWorker_MembersInjector(dataManagerProvider, locationUtilProvider, schedulerProvider, compositeDisposableProvider);
  }

  @Override
  public void injectMembers(GeofencesUpdateWorker instance) {
    injectDataManager(instance, dataManagerProvider.get());
    injectLocationUtil(instance, locationUtilProvider.get());
    injectSchedulerProvider(instance, schedulerProvider.get());
    injectCompositeDisposable(instance, compositeDisposableProvider.get());
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.GeofencesUpdateWorker.dataManager")
  public static void injectDataManager(GeofencesUpdateWorker instance, DataManager dataManager) {
    instance.dataManager = dataManager;
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.GeofencesUpdateWorker.locationUtil")
  public static void injectLocationUtil(GeofencesUpdateWorker instance, LocationUtil locationUtil) {
    instance.locationUtil = locationUtil;
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.GeofencesUpdateWorker.schedulerProvider")
  public static void injectSchedulerProvider(GeofencesUpdateWorker instance,
      SchedulerProvider schedulerProvider) {
    instance.schedulerProvider = schedulerProvider;
  }

  @InjectedFieldSignature("com.sca.in_telligent.service.GeofencesUpdateWorker.compositeDisposable")
  public static void injectCompositeDisposable(GeofencesUpdateWorker instance,
      CompositeDisposable compositeDisposable) {
    instance.compositeDisposable = compositeDisposable;
  }
}
